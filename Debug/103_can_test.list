
103_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002624  08002624  00012624  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  2000000c  08002660  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00001200  20000168  08002660  00020168  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a751  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b27  00000000  00000000  0002a786  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004876  00000000  00000000  0002c2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000670  00000000  00000000  00030b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000880  00000000  00000000  00031198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000033b1  00000000  00000000  00031a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002ce8  00000000  00000000  00034dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00037ab1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000012c4  00000000  00000000  00037b30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800260c 	.word	0x0800260c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800260c 	.word	0x0800260c

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800016a:	f000 b9ad 	b.w	80004c8 <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	468c      	mov	ip, r1
 80001f2:	460e      	mov	r6, r1
 80001f4:	4604      	mov	r4, r0
 80001f6:	9d08      	ldr	r5, [sp, #32]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d150      	bne.n	800029e <__udivmoddi4+0xb2>
 80001fc:	428a      	cmp	r2, r1
 80001fe:	4617      	mov	r7, r2
 8000200:	d96c      	bls.n	80002dc <__udivmoddi4+0xf0>
 8000202:	fab2 fe82 	clz	lr, r2
 8000206:	f1be 0f00 	cmp.w	lr, #0
 800020a:	d00b      	beq.n	8000224 <__udivmoddi4+0x38>
 800020c:	f1ce 0c20 	rsb	ip, lr, #32
 8000210:	fa01 f60e 	lsl.w	r6, r1, lr
 8000214:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000218:	fa02 f70e 	lsl.w	r7, r2, lr
 800021c:	ea4c 0c06 	orr.w	ip, ip, r6
 8000220:	fa00 f40e 	lsl.w	r4, r0, lr
 8000224:	0c3a      	lsrs	r2, r7, #16
 8000226:	fbbc f9f2 	udiv	r9, ip, r2
 800022a:	b2bb      	uxth	r3, r7
 800022c:	fb02 cc19 	mls	ip, r2, r9, ip
 8000230:	fb09 fa03 	mul.w	sl, r9, r3
 8000234:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000238:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 800023c:	45b2      	cmp	sl, r6
 800023e:	d90a      	bls.n	8000256 <__udivmoddi4+0x6a>
 8000240:	19f6      	adds	r6, r6, r7
 8000242:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8000246:	f080 8125 	bcs.w	8000494 <__udivmoddi4+0x2a8>
 800024a:	45b2      	cmp	sl, r6
 800024c:	f240 8122 	bls.w	8000494 <__udivmoddi4+0x2a8>
 8000250:	f1a9 0902 	sub.w	r9, r9, #2
 8000254:	443e      	add	r6, r7
 8000256:	eba6 060a 	sub.w	r6, r6, sl
 800025a:	fbb6 f0f2 	udiv	r0, r6, r2
 800025e:	fb02 6610 	mls	r6, r2, r0, r6
 8000262:	fb00 f303 	mul.w	r3, r0, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800026c:	42a3      	cmp	r3, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x98>
 8000270:	19e4      	adds	r4, r4, r7
 8000272:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000276:	f080 810b 	bcs.w	8000490 <__udivmoddi4+0x2a4>
 800027a:	42a3      	cmp	r3, r4
 800027c:	f240 8108 	bls.w	8000490 <__udivmoddi4+0x2a4>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	2100      	movs	r1, #0
 8000286:	1ae4      	subs	r4, r4, r3
 8000288:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800028c:	2d00      	cmp	r5, #0
 800028e:	d062      	beq.n	8000356 <__udivmoddi4+0x16a>
 8000290:	2300      	movs	r3, #0
 8000292:	fa24 f40e 	lsr.w	r4, r4, lr
 8000296:	602c      	str	r4, [r5, #0]
 8000298:	606b      	str	r3, [r5, #4]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d907      	bls.n	80002b2 <__udivmoddi4+0xc6>
 80002a2:	2d00      	cmp	r5, #0
 80002a4:	d055      	beq.n	8000352 <__udivmoddi4+0x166>
 80002a6:	2100      	movs	r1, #0
 80002a8:	e885 0041 	stmia.w	r5, {r0, r6}
 80002ac:	4608      	mov	r0, r1
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	f040 808f 	bne.w	80003da <__udivmoddi4+0x1ee>
 80002bc:	42b3      	cmp	r3, r6
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xda>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80fc 	bhi.w	80004be <__udivmoddi4+0x2d2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb66 0603 	sbc.w	r6, r6, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	46b4      	mov	ip, r6
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d040      	beq.n	8000356 <__udivmoddi4+0x16a>
 80002d4:	e885 1010 	stmia.w	r5, {r4, ip}
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	b912      	cbnz	r2, 80002e4 <__udivmoddi4+0xf8>
 80002de:	2701      	movs	r7, #1
 80002e0:	fbb7 f7f2 	udiv	r7, r7, r2
 80002e4:	fab7 fe87 	clz	lr, r7
 80002e8:	f1be 0f00 	cmp.w	lr, #0
 80002ec:	d135      	bne.n	800035a <__udivmoddi4+0x16e>
 80002ee:	2101      	movs	r1, #1
 80002f0:	1bf6      	subs	r6, r6, r7
 80002f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002f6:	fa1f f887 	uxth.w	r8, r7
 80002fa:	fbb6 f2fc 	udiv	r2, r6, ip
 80002fe:	fb0c 6612 	mls	r6, ip, r2, r6
 8000302:	fb08 f002 	mul.w	r0, r8, r2
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800030c:	42b0      	cmp	r0, r6
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x134>
 8000310:	19f6      	adds	r6, r6, r7
 8000312:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x132>
 8000318:	42b0      	cmp	r0, r6
 800031a:	f200 80d2 	bhi.w	80004c2 <__udivmoddi4+0x2d6>
 800031e:	461a      	mov	r2, r3
 8000320:	1a36      	subs	r6, r6, r0
 8000322:	fbb6 f0fc 	udiv	r0, r6, ip
 8000326:	fb0c 6610 	mls	r6, ip, r0, r6
 800032a:	fb08 f800 	mul.w	r8, r8, r0
 800032e:	b2a3      	uxth	r3, r4
 8000330:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x15c>
 8000338:	19e4      	adds	r4, r4, r7
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x15a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b9 	bhi.w	80004b8 <__udivmoddi4+0x2cc>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000350:	e79c      	b.n	800028c <__udivmoddi4+0xa0>
 8000352:	4629      	mov	r1, r5
 8000354:	4628      	mov	r0, r5
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fa07 f70e 	lsl.w	r7, r7, lr
 800035e:	f1ce 0320 	rsb	r3, lr, #32
 8000362:	fa26 f203 	lsr.w	r2, r6, r3
 8000366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800036a:	fbb2 f1fc 	udiv	r1, r2, ip
 800036e:	fa1f f887 	uxth.w	r8, r7
 8000372:	fb0c 2211 	mls	r2, ip, r1, r2
 8000376:	fa06 f60e 	lsl.w	r6, r6, lr
 800037a:	fa20 f303 	lsr.w	r3, r0, r3
 800037e:	fb01 f908 	mul.w	r9, r1, r8
 8000382:	4333      	orrs	r3, r6
 8000384:	0c1e      	lsrs	r6, r3, #16
 8000386:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800038a:	45b1      	cmp	r9, r6
 800038c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x1ba>
 8000392:	19f6      	adds	r6, r6, r7
 8000394:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000398:	f080 808c 	bcs.w	80004b4 <__udivmoddi4+0x2c8>
 800039c:	45b1      	cmp	r9, r6
 800039e:	f240 8089 	bls.w	80004b4 <__udivmoddi4+0x2c8>
 80003a2:	3902      	subs	r1, #2
 80003a4:	443e      	add	r6, r7
 80003a6:	eba6 0609 	sub.w	r6, r6, r9
 80003aa:	fbb6 f0fc 	udiv	r0, r6, ip
 80003ae:	fb0c 6210 	mls	r2, ip, r0, r6
 80003b2:	fb00 f908 	mul.w	r9, r0, r8
 80003b6:	b29e      	uxth	r6, r3
 80003b8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003bc:	45b1      	cmp	r9, r6
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1e4>
 80003c0:	19f6      	adds	r6, r6, r7
 80003c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c6:	d271      	bcs.n	80004ac <__udivmoddi4+0x2c0>
 80003c8:	45b1      	cmp	r9, r6
 80003ca:	d96f      	bls.n	80004ac <__udivmoddi4+0x2c0>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443e      	add	r6, r7
 80003d0:	eba6 0609 	sub.w	r6, r6, r9
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	e78f      	b.n	80002fa <__udivmoddi4+0x10e>
 80003da:	f1c1 0720 	rsb	r7, r1, #32
 80003de:	fa22 f807 	lsr.w	r8, r2, r7
 80003e2:	408b      	lsls	r3, r1
 80003e4:	ea48 0303 	orr.w	r3, r8, r3
 80003e8:	fa26 f407 	lsr.w	r4, r6, r7
 80003ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80003f0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003f4:	fa1f fc83 	uxth.w	ip, r3
 80003f8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003fc:	408e      	lsls	r6, r1
 80003fe:	fa20 f807 	lsr.w	r8, r0, r7
 8000402:	fb09 fa0c 	mul.w	sl, r9, ip
 8000406:	ea48 0806 	orr.w	r8, r8, r6
 800040a:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800040e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000412:	45a2      	cmp	sl, r4
 8000414:	fa02 f201 	lsl.w	r2, r2, r1
 8000418:	fa00 f601 	lsl.w	r6, r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x244>
 800041e:	18e4      	adds	r4, r4, r3
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d244      	bcs.n	80004b0 <__udivmoddi4+0x2c4>
 8000426:	45a2      	cmp	sl, r4
 8000428:	d942      	bls.n	80004b0 <__udivmoddi4+0x2c4>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	441c      	add	r4, r3
 8000430:	eba4 040a 	sub.w	r4, r4, sl
 8000434:	fbb4 f0fe 	udiv	r0, r4, lr
 8000438:	fb0e 4410 	mls	r4, lr, r0, r4
 800043c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000440:	fa1f f888 	uxth.w	r8, r8
 8000444:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000448:	45a4      	cmp	ip, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x270>
 800044c:	18e4      	adds	r4, r4, r3
 800044e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8000452:	d229      	bcs.n	80004a8 <__udivmoddi4+0x2bc>
 8000454:	45a4      	cmp	ip, r4
 8000456:	d927      	bls.n	80004a8 <__udivmoddi4+0x2bc>
 8000458:	3802      	subs	r0, #2
 800045a:	441c      	add	r4, r3
 800045c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000460:	fba0 8902 	umull	r8, r9, r0, r2
 8000464:	eba4 0c0c 	sub.w	ip, r4, ip
 8000468:	45cc      	cmp	ip, r9
 800046a:	46c2      	mov	sl, r8
 800046c:	46ce      	mov	lr, r9
 800046e:	d315      	bcc.n	800049c <__udivmoddi4+0x2b0>
 8000470:	d012      	beq.n	8000498 <__udivmoddi4+0x2ac>
 8000472:	b155      	cbz	r5, 800048a <__udivmoddi4+0x29e>
 8000474:	ebb6 030a 	subs.w	r3, r6, sl
 8000478:	eb6c 060e 	sbc.w	r6, ip, lr
 800047c:	fa06 f707 	lsl.w	r7, r6, r7
 8000480:	40cb      	lsrs	r3, r1
 8000482:	431f      	orrs	r7, r3
 8000484:	40ce      	lsrs	r6, r1
 8000486:	602f      	str	r7, [r5, #0]
 8000488:	606e      	str	r6, [r5, #4]
 800048a:	2100      	movs	r1, #0
 800048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000490:	4610      	mov	r0, r2
 8000492:	e6f7      	b.n	8000284 <__udivmoddi4+0x98>
 8000494:	4689      	mov	r9, r1
 8000496:	e6de      	b.n	8000256 <__udivmoddi4+0x6a>
 8000498:	4546      	cmp	r6, r8
 800049a:	d2ea      	bcs.n	8000472 <__udivmoddi4+0x286>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 0e03 	sbc.w	lr, r9, r3
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7e4      	b.n	8000472 <__udivmoddi4+0x286>
 80004a8:	4670      	mov	r0, lr
 80004aa:	e7d7      	b.n	800045c <__udivmoddi4+0x270>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e78f      	b.n	80003d0 <__udivmoddi4+0x1e4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7bd      	b.n	8000430 <__udivmoddi4+0x244>
 80004b4:	4611      	mov	r1, r2
 80004b6:	e776      	b.n	80003a6 <__udivmoddi4+0x1ba>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e744      	b.n	8000348 <__udivmoddi4+0x15c>
 80004be:	4608      	mov	r0, r1
 80004c0:	e706      	b.n	80002d0 <__udivmoddi4+0xe4>
 80004c2:	3a02      	subs	r2, #2
 80004c4:	443e      	add	r6, r7
 80004c6:	e72b      	b.n	8000320 <__udivmoddi4+0x134>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_InitTick+0x3c>)
{
 80004d0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d2:	7818      	ldrb	r0, [r3, #0]
 80004d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_InitTick+0x40>)
 80004de:	6810      	ldr	r0, [r2, #0]
 80004e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e4:	f000 fb90 	bl	8000c08 <HAL_SYSTICK_Config>
 80004e8:	4604      	mov	r4, r0
 80004ea:	b958      	cbnz	r0, 8000504 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ec:	2d0f      	cmp	r5, #15
 80004ee:	d809      	bhi.n	8000504 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f0:	4602      	mov	r2, r0
 80004f2:	4629      	mov	r1, r5
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004f8:	f000 fb44 	bl	8000b84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <HAL_InitTick+0x44>)
 80004fe:	4620      	mov	r0, r4
 8000500:	601d      	str	r5, [r3, #0]
 8000502:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000504:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000506:	bd38      	pop	{r3, r4, r5, pc}
 8000508:	20000000 	.word	0x20000000
 800050c:	20000008 	.word	0x20000008
 8000510:	20000004 	.word	0x20000004

08000514 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_Init+0x20>)
{
 8000516:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000522:	f000 fb1d 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ffd0 	bl	80004cc <HAL_InitTick>
  HAL_MspInit();
 800052c:	f001 ff34 	bl	8002398 <HAL_MspInit>
}
 8000530:	2000      	movs	r0, #0
 8000532:	bd08      	pop	{r3, pc}
 8000534:	40022000 	.word	0x40022000

08000538 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <HAL_IncTick+0x10>)
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <HAL_IncTick+0x14>)
 800053c:	6811      	ldr	r1, [r2, #0]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	440b      	add	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000028 	.word	0x20000028
 800054c:	20000000 	.word	0x20000000

08000550 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <HAL_GetTick+0x8>)
 8000552:	6818      	ldr	r0, [r3, #0]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000028 	.word	0x20000028

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b538      	push	{r3, r4, r5, lr}
 800055e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000560:	f7ff fff6 	bl	8000550 <HAL_GetTick>
 8000564:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000566:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000568:	bf1e      	ittt	ne
 800056a:	4b04      	ldrne	r3, [pc, #16]	; (800057c <HAL_Delay+0x20>)
 800056c:	781b      	ldrbne	r3, [r3, #0]
 800056e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000570:	f7ff ffee 	bl	8000550 <HAL_GetTick>
 8000574:	1b40      	subs	r0, r0, r5
 8000576:	4284      	cmp	r4, r0
 8000578:	d8fa      	bhi.n	8000570 <HAL_Delay+0x14>
  {
  }
}
 800057a:	bd38      	pop	{r3, r4, r5, pc}
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000582:	4604      	mov	r4, r0
 8000584:	2800      	cmp	r0, #0
 8000586:	d06e      	beq.n	8000666 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000588:	f890 3020 	ldrb.w	r3, [r0, #32]
 800058c:	b90b      	cbnz	r3, 8000592 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800058e:	f001 ff25 	bl	80023dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000592:	6822      	ldr	r2, [r4, #0]
 8000594:	6813      	ldr	r3, [r2, #0]
 8000596:	f023 0302 	bic.w	r3, r3, #2
 800059a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800059c:	f7ff ffd8 	bl	8000550 <HAL_GetTick>
 80005a0:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	0791      	lsls	r1, r2, #30
 80005a8:	d451      	bmi.n	800064e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	f042 0201 	orr.w	r2, r2, #1
 80005b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005b2:	f7ff ffcd 	bl	8000550 <HAL_GetTick>
 80005b6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005b8:	6823      	ldr	r3, [r4, #0]
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	07d2      	lsls	r2, r2, #31
 80005be:	d554      	bpl.n	800066a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005c0:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80005c2:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005c4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	bf0c      	ite	eq
 80005ca:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005ce:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005d2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80005d4:	7e62      	ldrb	r2, [r4, #25]
 80005d6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	bf0c      	ite	eq
 80005dc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005e0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005e4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80005e6:	7ea2      	ldrb	r2, [r4, #26]
 80005e8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	bf0c      	ite	eq
 80005ee:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005f2:	f022 0220 	bicne.w	r2, r2, #32
 80005f6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80005f8:	7ee2      	ldrb	r2, [r4, #27]
 80005fa:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	bf0c      	ite	eq
 8000600:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000604:	f042 0210 	orrne.w	r2, r2, #16
 8000608:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800060a:	7f22      	ldrb	r2, [r4, #28]
 800060c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	bf0c      	ite	eq
 8000612:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000616:	f022 0208 	bicne.w	r2, r2, #8
 800061a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800061c:	7f62      	ldrb	r2, [r4, #29]
 800061e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	bf0c      	ite	eq
 8000624:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000628:	f022 0204 	bicne.w	r2, r2, #4
 800062c:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800062e:	68e1      	ldr	r1, [r4, #12]
 8000630:	68a2      	ldr	r2, [r4, #8]
 8000632:	430a      	orrs	r2, r1
 8000634:	6921      	ldr	r1, [r4, #16]
 8000636:	430a      	orrs	r2, r1
 8000638:	6961      	ldr	r1, [r4, #20]
 800063a:	430a      	orrs	r2, r1
 800063c:	6861      	ldr	r1, [r4, #4]
 800063e:	3901      	subs	r1, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000644:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000646:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000648:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800064c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800064e:	f7ff ff7f 	bl	8000550 <HAL_GetTick>
 8000652:	1b40      	subs	r0, r0, r5
 8000654:	280a      	cmp	r0, #10
 8000656:	d9a4      	bls.n	80005a2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000660:	2305      	movs	r3, #5
 8000662:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000666:	2001      	movs	r0, #1
}
 8000668:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800066a:	f7ff ff71 	bl	8000550 <HAL_GetTick>
 800066e:	1b40      	subs	r0, r0, r5
 8000670:	280a      	cmp	r0, #10
 8000672:	d9a1      	bls.n	80005b8 <HAL_CAN_Init+0x38>
 8000674:	e7f0      	b.n	8000658 <HAL_CAN_Init+0xd8>

08000676 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000676:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800067a:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 800067c:	3b01      	subs	r3, #1
 800067e:	2b01      	cmp	r3, #1
 8000680:	d85f      	bhi.n	8000742 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000682:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000684:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000686:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000688:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800068c:	f042 0201 	orr.w	r2, r2, #1
 8000690:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000694:	f000 021f 	and.w	r2, r0, #31
 8000698:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800069c:	43d4      	mvns	r4, r2
 800069e:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 80006a2:	4025      	ands	r5, r4
 80006a4:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80006a8:	69cd      	ldr	r5, [r1, #28]
 80006aa:	bb85      	cbnz	r5, 800070e <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80006ac:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80006b0:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80006b2:	4025      	ands	r5, r4
 80006b4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80006b8:	888d      	ldrh	r5, [r1, #4]
 80006ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80006be:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80006c2:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006c6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80006c8:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006ca:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80006ce:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006d2:	6988      	ldr	r0, [r1, #24]
 80006d4:	bb68      	cbnz	r0, 8000732 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80006d6:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80006da:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80006dc:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006e0:	6908      	ldr	r0, [r1, #16]
 80006e2:	bb50      	cbnz	r0, 800073a <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80006e4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80006e8:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80006ea:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80006ee:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 80006f0:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80006f2:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80006f4:	bf02      	ittt	eq
 80006f6:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 80006fa:	430a      	orreq	r2, r1
 80006fc:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000700:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000704:	f022 0201 	bic.w	r2, r2, #1
 8000708:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 800070c:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800070e:	2d01      	cmp	r5, #1
 8000710:	d1df      	bne.n	80006d2 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000712:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000716:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000718:	4315      	orrs	r5, r2
 800071a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800071e:	888d      	ldrh	r5, [r1, #4]
 8000720:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000724:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000728:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800072c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800072e:	898d      	ldrh	r5, [r1, #12]
 8000730:	e7cb      	b.n	80006ca <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000732:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000736:	4310      	orrs	r0, r2
 8000738:	e7d0      	b.n	80006dc <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800073a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800073e:	4310      	orrs	r0, r2
 8000740:	e7d3      	b.n	80006ea <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000742:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000748:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800074a:	2001      	movs	r0, #1
  }
}
 800074c:	bd70      	pop	{r4, r5, r6, pc}

0800074e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800074e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000750:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000754:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000756:	2b01      	cmp	r3, #1
 8000758:	d11f      	bne.n	800079a <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800075a:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800075c:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800075e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000762:	6813      	ldr	r3, [r2, #0]
 8000764:	f023 0301 	bic.w	r3, r3, #1
 8000768:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800076a:	f7ff fef1 	bl	8000550 <HAL_GetTick>
 800076e:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	6858      	ldr	r0, [r3, #4]
 8000774:	f010 0001 	ands.w	r0, r0, #1
 8000778:	d101      	bne.n	800077e <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800077a:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800077c:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800077e:	f7ff fee7 	bl	8000550 <HAL_GetTick>
 8000782:	1b40      	subs	r0, r0, r5
 8000784:	280a      	cmp	r0, #10
 8000786:	d9f3      	bls.n	8000770 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800078a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000790:	2305      	movs	r3, #5
 8000792:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000796:	2001      	movs	r0, #1
  }
}
 8000798:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800079a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800079c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a0:	6243      	str	r3, [r0, #36]	; 0x24
 80007a2:	e7f8      	b.n	8000796 <HAL_CAN_Start+0x48>

080007a4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80007a6:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007aa:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80007ac:	3d01      	subs	r5, #1
 80007ae:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007b0:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80007b2:	d841      	bhi.n	8000838 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007b4:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80007b8:	d03a      	beq.n	8000830 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007ba:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80007be:	2c03      	cmp	r4, #3
 80007c0:	f04f 0501 	mov.w	r5, #1
 80007c4:	d105      	bne.n	80007d2 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80007c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007cc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007ce:	2001      	movs	r0, #1
  }
}
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80007d2:	40a5      	lsls	r5, r4
 80007d4:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80007d6:	6888      	ldr	r0, [r1, #8]
 80007d8:	68cf      	ldr	r7, [r1, #12]
 80007da:	f104 0318 	add.w	r3, r4, #24
 80007de:	bb10      	cbnz	r0, 8000826 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80007e0:	6808      	ldr	r0, [r1, #0]
 80007e2:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80007ea:	6908      	ldr	r0, [r1, #16]
 80007ec:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 80007ee:	7d09      	ldrb	r1, [r1, #20]
 80007f0:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80007f2:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80007f6:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80007f8:	bf08      	it	eq
 80007fa:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80007fe:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000800:	bf04      	itt	eq
 8000802:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000806:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800080a:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 800080c:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800080e:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000818:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800081c:	f042 0201 	orr.w	r2, r2, #1
 8000820:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000826:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000828:	4338      	orrs	r0, r7
 800082a:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 800082e:	e7da      	b.n	80007e6 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000836:	e7c9      	b.n	80007cc <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000838:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800083a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800083e:	e7c5      	b.n	80007cc <HAL_CAN_AddTxMessage+0x28>

08000840 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000842:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000846:	3c01      	subs	r4, #1
 8000848:	2c01      	cmp	r4, #1
 800084a:	d86b      	bhi.n	8000924 <HAL_CAN_GetRxMessage+0xe4>
 800084c:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800084e:	b941      	cbnz	r1, 8000862 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000850:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000852:	07a4      	lsls	r4, r4, #30
 8000854:	d107      	bne.n	8000866 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000856:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800085c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800085e:	2001      	movs	r0, #1
  }
}
 8000860:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000862:	6934      	ldr	r4, [r6, #16]
 8000864:	e7f5      	b.n	8000852 <HAL_CAN_GetRxMessage+0x12>
 8000866:	010c      	lsls	r4, r1, #4
 8000868:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800086a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800086e:	f007 0704 	and.w	r7, r7, #4
 8000872:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000874:	2f00      	cmp	r7, #0
 8000876:	d14b      	bne.n	8000910 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000878:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800087c:	0d7f      	lsrs	r7, r7, #21
 800087e:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000880:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000884:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000886:	f007 0702 	and.w	r7, r7, #2
 800088a:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800088c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000890:	f007 070f 	and.w	r7, r7, #15
 8000894:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000896:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800089a:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800089e:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008a2:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008a4:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008a6:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008a8:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80008ac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80008ae:	6802      	ldr	r2, [r0, #0]
 80008b0:	4422      	add	r2, r4
 80008b2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008b6:	0a12      	lsrs	r2, r2, #8
 80008b8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80008ba:	6802      	ldr	r2, [r0, #0]
 80008bc:	4422      	add	r2, r4
 80008be:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80008c6:	6802      	ldr	r2, [r0, #0]
 80008c8:	4422      	add	r2, r4
 80008ca:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008ce:	0e12      	lsrs	r2, r2, #24
 80008d0:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80008d2:	6802      	ldr	r2, [r0, #0]
 80008d4:	4422      	add	r2, r4
 80008d6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008da:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80008dc:	6802      	ldr	r2, [r0, #0]
 80008de:	4422      	add	r2, r4
 80008e0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008e4:	0a12      	lsrs	r2, r2, #8
 80008e6:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80008e8:	6802      	ldr	r2, [r0, #0]
 80008ea:	4422      	add	r2, r4
 80008ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008f0:	0c12      	lsrs	r2, r2, #16
 80008f2:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80008f4:	6802      	ldr	r2, [r0, #0]
 80008f6:	4414      	add	r4, r2
 80008f8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 80008fc:	0e12      	lsrs	r2, r2, #24
 80008fe:	71da      	strb	r2, [r3, #7]
 8000900:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000902:	b951      	cbnz	r1, 800091a <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000904:	68da      	ldr	r2, [r3, #12]
 8000906:	f042 0220 	orr.w	r2, r2, #32
 800090a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800090c:	2000      	movs	r0, #0
 800090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000910:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000914:	08ff      	lsrs	r7, r7, #3
 8000916:	6057      	str	r7, [r2, #4]
 8000918:	e7b2      	b.n	8000880 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	f042 0220 	orr.w	r2, r2, #32
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	e7f3      	b.n	800090c <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000924:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092a:	e797      	b.n	800085c <HAL_CAN_GetRxMessage+0x1c>

0800092c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800092c:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000930:	3b01      	subs	r3, #1
 8000932:	2b01      	cmp	r3, #1
 8000934:	d805      	bhi.n	8000942 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000936:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000938:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800093a:	6953      	ldr	r3, [r2, #20]
 800093c:	4319      	orrs	r1, r3
 800093e:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000940:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000942:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000948:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800094a:	2001      	movs	r0, #1
  }
}
 800094c:	4770      	bx	lr

0800094e <HAL_CAN_TxMailbox1CompleteCallback>:
 800094e:	4770      	bx	lr

08000950 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000950:	4770      	bx	lr

08000952 <HAL_CAN_TxMailbox0AbortCallback>:
 8000952:	4770      	bx	lr

08000954 <HAL_CAN_TxMailbox1AbortCallback>:
 8000954:	4770      	bx	lr

08000956 <HAL_CAN_TxMailbox2AbortCallback>:
 8000956:	4770      	bx	lr

08000958 <HAL_CAN_RxFifo0FullCallback>:
 8000958:	4770      	bx	lr

0800095a <HAL_CAN_RxFifo1MsgPendingCallback>:
 800095a:	4770      	bx	lr

0800095c <HAL_CAN_RxFifo1FullCallback>:
 800095c:	4770      	bx	lr

0800095e <HAL_CAN_SleepCallback>:
 800095e:	4770      	bx	lr

08000960 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000960:	4770      	bx	lr

08000962 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000962:	4770      	bx	lr

08000964 <HAL_CAN_IRQHandler>:
{
 8000964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000968:	6803      	ldr	r3, [r0, #0]
{
 800096a:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800096c:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800096e:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000972:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000976:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000978:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800097c:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000980:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000984:	d022      	beq.n	80009cc <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000986:	f017 0401 	ands.w	r4, r7, #1
 800098a:	d007      	beq.n	800099c <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800098c:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800098e:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000990:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000992:	f140 80a3 	bpl.w	8000adc <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000996:	f001 fce1 	bl	800235c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800099a:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800099c:	05fb      	lsls	r3, r7, #23
 800099e:	d509      	bpl.n	80009b4 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a4:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009a6:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009a8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009aa:	f140 80a5 	bpl.w	8000af8 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009ae:	4628      	mov	r0, r5
 80009b0:	f7ff ffcd 	bl	800094e <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009b4:	03fb      	lsls	r3, r7, #15
 80009b6:	d509      	bpl.n	80009cc <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009bc:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009be:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009c0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009c2:	f140 80a7 	bpl.w	8000b14 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009c6:	4628      	mov	r0, r5
 80009c8:	f7ff ffc2 	bl	8000950 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80009cc:	0733      	lsls	r3, r6, #28
 80009ce:	d507      	bpl.n	80009e0 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80009d0:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009d4:	bf1f      	itttt	ne
 80009d6:	2210      	movne	r2, #16
 80009d8:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80009da:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009de:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80009e0:	0777      	lsls	r7, r6, #29
 80009e2:	d508      	bpl.n	80009f6 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80009e4:	f01b 0f08 	tst.w	fp, #8
 80009e8:	d005      	beq.n	80009f6 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009ea:	2208      	movs	r2, #8
 80009ec:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009ee:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009f0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009f2:	f7ff ffb1 	bl	8000958 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009f6:	07b0      	lsls	r0, r6, #30
 80009f8:	d506      	bpl.n	8000a08 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	0799      	lsls	r1, r3, #30
 8000a00:	d002      	beq.n	8000a08 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a02:	4628      	mov	r0, r5
 8000a04:	f001 fcb2 	bl	800236c <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a08:	0672      	lsls	r2, r6, #25
 8000a0a:	d507      	bpl.n	8000a1c <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a0c:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a10:	bf1f      	itttt	ne
 8000a12:	2210      	movne	r2, #16
 8000a14:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a16:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a1a:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a1c:	06b3      	lsls	r3, r6, #26
 8000a1e:	d508      	bpl.n	8000a32 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a20:	f01a 0f08 	tst.w	sl, #8
 8000a24:	d005      	beq.n	8000a32 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a26:	2208      	movs	r2, #8
 8000a28:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a2a:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a2c:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a2e:	f7ff ff95 	bl	800095c <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a32:	06f7      	lsls	r7, r6, #27
 8000a34:	d506      	bpl.n	8000a44 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	0798      	lsls	r0, r3, #30
 8000a3c:	d002      	beq.n	8000a44 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f7ff ff8b 	bl	800095a <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a44:	03b1      	lsls	r1, r6, #14
 8000a46:	d508      	bpl.n	8000a5a <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a48:	f019 0f10 	tst.w	r9, #16
 8000a4c:	d005      	beq.n	8000a5a <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a4e:	2210      	movs	r2, #16
 8000a50:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8000a52:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a54:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000a56:	f7ff ff82 	bl	800095e <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a5a:	03f2      	lsls	r2, r6, #15
 8000a5c:	d508      	bpl.n	8000a70 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a5e:	f019 0f08 	tst.w	r9, #8
 8000a62:	d005      	beq.n	8000a70 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a64:	2208      	movs	r2, #8
 8000a66:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a68:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a6a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a6c:	f7ff ff78 	bl	8000960 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a70:	0433      	lsls	r3, r6, #16
 8000a72:	d52a      	bpl.n	8000aca <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a74:	f019 0f04 	tst.w	r9, #4
 8000a78:	682a      	ldr	r2, [r5, #0]
 8000a7a:	d024      	beq.n	8000ac6 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a7c:	05f7      	lsls	r7, r6, #23
 8000a7e:	d504      	bpl.n	8000a8a <HAL_CAN_IRQHandler+0x126>
 8000a80:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a84:	bf18      	it	ne
 8000a86:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a8a:	05b0      	lsls	r0, r6, #22
 8000a8c:	d504      	bpl.n	8000a98 <HAL_CAN_IRQHandler+0x134>
 8000a8e:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000a92:	bf18      	it	ne
 8000a94:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a98:	0571      	lsls	r1, r6, #21
 8000a9a:	d504      	bpl.n	8000aa6 <HAL_CAN_IRQHandler+0x142>
 8000a9c:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000aa0:	bf18      	it	ne
 8000aa2:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000aa6:	0533      	lsls	r3, r6, #20
 8000aa8:	d50d      	bpl.n	8000ac6 <HAL_CAN_IRQHandler+0x162>
 8000aaa:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000aae:	d00a      	beq.n	8000ac6 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000ab0:	2b30      	cmp	r3, #48	; 0x30
 8000ab2:	d04c      	beq.n	8000b4e <HAL_CAN_IRQHandler+0x1ea>
 8000ab4:	d83c      	bhi.n	8000b30 <HAL_CAN_IRQHandler+0x1cc>
 8000ab6:	2b10      	cmp	r3, #16
 8000ab8:	d043      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x1de>
 8000aba:	2b20      	cmp	r3, #32
 8000abc:	d044      	beq.n	8000b48 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000abe:	6993      	ldr	r3, [r2, #24]
 8000ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ac4:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000aca:	b12c      	cbz	r4, 8000ad8 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000acc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000ace:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000ad0:	431c      	orrs	r4, r3
 8000ad2:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000ad4:	f7ff ff45 	bl	8000962 <HAL_CAN_ErrorCallback>
 8000ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000adc:	077a      	lsls	r2, r7, #29
 8000ade:	d405      	bmi.n	8000aec <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000ae0:	f017 0408 	ands.w	r4, r7, #8
 8000ae4:	d105      	bne.n	8000af2 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ae6:	f7ff ff34 	bl	8000952 <HAL_CAN_TxMailbox0AbortCallback>
 8000aea:	e757      	b.n	800099c <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000aec:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000af0:	e754      	b.n	800099c <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000af2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000af6:	e751      	b.n	800099c <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000af8:	0579      	lsls	r1, r7, #21
 8000afa:	d502      	bpl.n	8000b02 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000afc:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000b00:	e758      	b.n	80009b4 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b02:	053a      	lsls	r2, r7, #20
 8000b04:	d502      	bpl.n	8000b0c <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b06:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b0a:	e753      	b.n	80009b4 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f7ff ff21 	bl	8000954 <HAL_CAN_TxMailbox1AbortCallback>
 8000b12:	e74f      	b.n	80009b4 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b14:	0379      	lsls	r1, r7, #13
 8000b16:	d502      	bpl.n	8000b1e <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b18:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000b1c:	e756      	b.n	80009cc <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b1e:	033a      	lsls	r2, r7, #12
 8000b20:	d502      	bpl.n	8000b28 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b22:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000b26:	e751      	b.n	80009cc <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f7ff ff14 	bl	8000956 <HAL_CAN_TxMailbox2AbortCallback>
 8000b2e:	e74d      	b.n	80009cc <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000b30:	2b50      	cmp	r3, #80	; 0x50
 8000b32:	d00f      	beq.n	8000b54 <HAL_CAN_IRQHandler+0x1f0>
 8000b34:	2b60      	cmp	r3, #96	; 0x60
 8000b36:	d010      	beq.n	8000b5a <HAL_CAN_IRQHandler+0x1f6>
 8000b38:	2b40      	cmp	r3, #64	; 0x40
 8000b3a:	d1c0      	bne.n	8000abe <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b3c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000b40:	e7bd      	b.n	8000abe <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b42:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000b46:	e7ba      	b.n	8000abe <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b48:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000b4c:	e7b7      	b.n	8000abe <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b4e:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000b52:	e7b4      	b.n	8000abe <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b54:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000b58:	e7b1      	b.n	8000abe <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b5a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000b5e:	e7ae      	b.n	8000abe <HAL_CAN_IRQHandler+0x15a>

08000b60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b62:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b66:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	0c1b      	lsrs	r3, r3, #16
 8000b72:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b7a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b7c:	60d3      	str	r3, [r2, #12]
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b86:	b530      	push	{r4, r5, lr}
 8000b88:	68dc      	ldr	r4, [r3, #12]
 8000b8a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	bf28      	it	cs
 8000b98:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba0:	bf98      	it	ls
 8000ba2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ba8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bac:	bf88      	it	hi
 8000bae:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4019      	ands	r1, r3
 8000bb2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	fa05 f404 	lsl.w	r4, r5, r4
 8000bb8:	3c01      	subs	r4, #1
 8000bba:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbe:	ea42 0201 	orr.w	r2, r2, r1
 8000bc2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	bfa9      	itett	ge
 8000bc8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	4b06      	ldrlt	r3, [pc, #24]	; (8000be8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	b2d2      	uxtbge	r2, r2
 8000bd0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	bfbb      	ittet	lt
 8000bd6:	f000 000f 	andlt.w	r0, r0, #15
 8000bda:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	541a      	strblt	r2, [r3, r0]
 8000be2:	bd30      	pop	{r4, r5, pc}
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	e000ed14 	.word	0xe000ed14

08000bec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bec:	2800      	cmp	r0, #0
 8000bee:	db08      	blt.n	8000c02 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	0942      	lsrs	r2, r0, #5
 8000bf4:	f000 001f 	and.w	r0, r0, #31
 8000bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bfc:	4b01      	ldr	r3, [pc, #4]	; (8000c04 <HAL_NVIC_EnableIRQ+0x18>)
 8000bfe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	3801      	subs	r0, #1
 8000c0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0e:	d20a      	bcs.n	8000c26 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c38:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000c3a:	4626      	mov	r6, r4
 8000c3c:	4b66      	ldr	r3, [pc, #408]	; (8000dd8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000de8 <HAL_GPIO_Init+0x1b4>
 8000c42:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000dec <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	680a      	ldr	r2, [r1, #0]
 8000c48:	fa32 f506 	lsrs.w	r5, r2, r6
 8000c4c:	d102      	bne.n	8000c54 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000c4e:	b003      	add	sp, #12
 8000c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000c54:	f04f 0801 	mov.w	r8, #1
 8000c58:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000c60:	4590      	cmp	r8, r2
 8000c62:	d17f      	bne.n	8000d64 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000c64:	684d      	ldr	r5, [r1, #4]
 8000c66:	2d12      	cmp	r5, #18
 8000c68:	f000 80aa 	beq.w	8000dc0 <HAL_GPIO_Init+0x18c>
 8000c6c:	f200 8083 	bhi.w	8000d76 <HAL_GPIO_Init+0x142>
 8000c70:	2d02      	cmp	r5, #2
 8000c72:	f000 80a2 	beq.w	8000dba <HAL_GPIO_Init+0x186>
 8000c76:	d877      	bhi.n	8000d68 <HAL_GPIO_Init+0x134>
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	f000 8089 	beq.w	8000d90 <HAL_GPIO_Init+0x15c>
 8000c7e:	2d01      	cmp	r5, #1
 8000c80:	f000 8099 	beq.w	8000db6 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c84:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c88:	2aff      	cmp	r2, #255	; 0xff
 8000c8a:	bf93      	iteet	ls
 8000c8c:	4682      	movls	sl, r0
 8000c8e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000c92:	3d08      	subhi	r5, #8
 8000c94:	f8d0 b000 	ldrls.w	fp, [r0]
 8000c98:	bf92      	itee	ls
 8000c9a:	00b5      	lslls	r5, r6, #2
 8000c9c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000ca0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca2:	fa09 f805 	lsl.w	r8, r9, r5
 8000ca6:	ea2b 0808 	bic.w	r8, fp, r8
 8000caa:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cae:	bf88      	it	hi
 8000cb0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb4:	ea48 0505 	orr.w	r5, r8, r5
 8000cb8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000cc0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000cc4:	d04e      	beq.n	8000d64 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc6:	4d45      	ldr	r5, [pc, #276]	; (8000ddc <HAL_GPIO_Init+0x1a8>)
 8000cc8:	4f44      	ldr	r7, [pc, #272]	; (8000ddc <HAL_GPIO_Init+0x1a8>)
 8000cca:	69ad      	ldr	r5, [r5, #24]
 8000ccc:	f026 0803 	bic.w	r8, r6, #3
 8000cd0:	f045 0501 	orr.w	r5, r5, #1
 8000cd4:	61bd      	str	r5, [r7, #24]
 8000cd6:	69bd      	ldr	r5, [r7, #24]
 8000cd8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000cdc:	f005 0501 	and.w	r5, r5, #1
 8000ce0:	9501      	str	r5, [sp, #4]
 8000ce2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000cf0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf4:	fa09 f90b 	lsl.w	r9, r9, fp
 8000cf8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cfc:	4d38      	ldr	r5, [pc, #224]	; (8000de0 <HAL_GPIO_Init+0x1ac>)
 8000cfe:	42a8      	cmp	r0, r5
 8000d00:	d063      	beq.n	8000dca <HAL_GPIO_Init+0x196>
 8000d02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d06:	42a8      	cmp	r0, r5
 8000d08:	d061      	beq.n	8000dce <HAL_GPIO_Init+0x19a>
 8000d0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d0e:	42a8      	cmp	r0, r5
 8000d10:	d05f      	beq.n	8000dd2 <HAL_GPIO_Init+0x19e>
 8000d12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d16:	42a8      	cmp	r0, r5
 8000d18:	bf0c      	ite	eq
 8000d1a:	2503      	moveq	r5, #3
 8000d1c:	2504      	movne	r5, #4
 8000d1e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d22:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000d26:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d2c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000d30:	bf14      	ite	ne
 8000d32:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d34:	4395      	biceq	r5, r2
 8000d36:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000d38:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000d3e:	bf14      	ite	ne
 8000d40:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d42:	4395      	biceq	r5, r2
 8000d44:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d46:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d48:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d4c:	bf14      	ite	ne
 8000d4e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d50:	4395      	biceq	r5, r2
 8000d52:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d54:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d56:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d5a:	bf14      	ite	ne
 8000d5c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5e:	ea25 0202 	biceq.w	r2, r5, r2
 8000d62:	60da      	str	r2, [r3, #12]
	position++;
 8000d64:	3601      	adds	r6, #1
 8000d66:	e76e      	b.n	8000c46 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000d68:	2d03      	cmp	r5, #3
 8000d6a:	d022      	beq.n	8000db2 <HAL_GPIO_Init+0x17e>
 8000d6c:	2d11      	cmp	r5, #17
 8000d6e:	d189      	bne.n	8000c84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d70:	68cc      	ldr	r4, [r1, #12]
 8000d72:	3404      	adds	r4, #4
          break;
 8000d74:	e786      	b.n	8000c84 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000d76:	4f1b      	ldr	r7, [pc, #108]	; (8000de4 <HAL_GPIO_Init+0x1b0>)
 8000d78:	42bd      	cmp	r5, r7
 8000d7a:	d009      	beq.n	8000d90 <HAL_GPIO_Init+0x15c>
 8000d7c:	d812      	bhi.n	8000da4 <HAL_GPIO_Init+0x170>
 8000d7e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000df0 <HAL_GPIO_Init+0x1bc>
 8000d82:	454d      	cmp	r5, r9
 8000d84:	d004      	beq.n	8000d90 <HAL_GPIO_Init+0x15c>
 8000d86:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000d8a:	454d      	cmp	r5, r9
 8000d8c:	f47f af7a 	bne.w	8000c84 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d90:	688c      	ldr	r4, [r1, #8]
 8000d92:	b1c4      	cbz	r4, 8000dc6 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d94:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000d96:	bf0c      	ite	eq
 8000d98:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d9c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2408      	movs	r4, #8
 8000da2:	e76f      	b.n	8000c84 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000da4:	4575      	cmp	r5, lr
 8000da6:	d0f3      	beq.n	8000d90 <HAL_GPIO_Init+0x15c>
 8000da8:	4565      	cmp	r5, ip
 8000daa:	d0f1      	beq.n	8000d90 <HAL_GPIO_Init+0x15c>
 8000dac:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000df4 <HAL_GPIO_Init+0x1c0>
 8000db0:	e7eb      	b.n	8000d8a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db2:	2400      	movs	r4, #0
 8000db4:	e766      	b.n	8000c84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db6:	68cc      	ldr	r4, [r1, #12]
          break;
 8000db8:	e764      	b.n	8000c84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dba:	68cc      	ldr	r4, [r1, #12]
 8000dbc:	3408      	adds	r4, #8
          break;
 8000dbe:	e761      	b.n	8000c84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc0:	68cc      	ldr	r4, [r1, #12]
 8000dc2:	340c      	adds	r4, #12
          break;
 8000dc4:	e75e      	b.n	8000c84 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc6:	2404      	movs	r4, #4
 8000dc8:	e75c      	b.n	8000c84 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dca:	2500      	movs	r5, #0
 8000dcc:	e7a7      	b.n	8000d1e <HAL_GPIO_Init+0xea>
 8000dce:	2501      	movs	r5, #1
 8000dd0:	e7a5      	b.n	8000d1e <HAL_GPIO_Init+0xea>
 8000dd2:	2502      	movs	r5, #2
 8000dd4:	e7a3      	b.n	8000d1e <HAL_GPIO_Init+0xea>
 8000dd6:	bf00      	nop
 8000dd8:	40010400 	.word	0x40010400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	10210000 	.word	0x10210000
 8000de8:	10310000 	.word	0x10310000
 8000dec:	10320000 	.word	0x10320000
 8000df0:	10110000 	.word	0x10110000
 8000df4:	10220000 	.word	0x10220000

08000df8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df8:	b10a      	cbz	r2, 8000dfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dfa:	6101      	str	r1, [r0, #16]
 8000dfc:	4770      	bx	lr
 8000dfe:	0409      	lsls	r1, r1, #16
 8000e00:	e7fb      	b.n	8000dfa <HAL_GPIO_WritePin+0x2>

08000e02 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000e02:	68c3      	ldr	r3, [r0, #12]
 8000e04:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e06:	bf14      	ite	ne
 8000e08:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e0a:	6101      	streq	r1, [r0, #16]
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e14:	4605      	mov	r5, r0
 8000e16:	b908      	cbnz	r0, 8000e1c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000e18:	2001      	movs	r0, #1
 8000e1a:	e03c      	b.n	8000e96 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1c:	6803      	ldr	r3, [r0, #0]
 8000e1e:	07db      	lsls	r3, r3, #31
 8000e20:	d410      	bmi.n	8000e44 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	079f      	lsls	r7, r3, #30
 8000e26:	d45d      	bmi.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	0719      	lsls	r1, r3, #28
 8000e2c:	f100 8094 	bmi.w	8000f58 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	075a      	lsls	r2, r3, #29
 8000e34:	f100 80be 	bmi.w	8000fb4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e38:	69e8      	ldr	r0, [r5, #28]
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	f040 812c 	bne.w	8001098 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000e40:	2000      	movs	r0, #0
 8000e42:	e028      	b.n	8000e96 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e44:	4c8f      	ldr	r4, [pc, #572]	; (8001084 <HAL_RCC_OscConfig+0x274>)
 8000e46:	6863      	ldr	r3, [r4, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d007      	beq.n	8000e60 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d109      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
 8000e5a:	6863      	ldr	r3, [r4, #4]
 8000e5c:	03de      	lsls	r6, r3, #15
 8000e5e:	d506      	bpl.n	8000e6e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	039c      	lsls	r4, r3, #14
 8000e64:	d5dd      	bpl.n	8000e22 <HAL_RCC_OscConfig+0x12>
 8000e66:	686b      	ldr	r3, [r5, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1da      	bne.n	8000e22 <HAL_RCC_OscConfig+0x12>
 8000e6c:	e7d4      	b.n	8000e18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	686b      	ldr	r3, [r5, #4]
 8000e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e74:	d112      	bne.n	8000e9c <HAL_RCC_OscConfig+0x8c>
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fb67 	bl	8000550 <HAL_GetTick>
 8000e82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	0398      	lsls	r0, r3, #14
 8000e88:	d4cb      	bmi.n	8000e22 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fb61 	bl	8000550 <HAL_GetTick>
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	2864      	cmp	r0, #100	; 0x64
 8000e92:	d9f7      	bls.n	8000e84 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000e94:	2003      	movs	r0, #3
}
 8000e96:	b002      	add	sp, #8
 8000e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9c:	b99b      	cbnz	r3, 8000ec6 <HAL_RCC_OscConfig+0xb6>
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000eae:	f7ff fb4f 	bl	8000550 <HAL_GetTick>
 8000eb2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	0399      	lsls	r1, r3, #14
 8000eb8:	d5b3      	bpl.n	8000e22 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eba:	f7ff fb49 	bl	8000550 <HAL_GetTick>
 8000ebe:	1b80      	subs	r0, r0, r6
 8000ec0:	2864      	cmp	r0, #100	; 0x64
 8000ec2:	d9f7      	bls.n	8000eb4 <HAL_RCC_OscConfig+0xa4>
 8000ec4:	e7e6      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	d103      	bne.n	8000ed6 <HAL_RCC_OscConfig+0xc6>
 8000ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed2:	6023      	str	r3, [r4, #0]
 8000ed4:	e7cf      	b.n	8000e76 <HAL_RCC_OscConfig+0x66>
 8000ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eda:	6023      	str	r3, [r4, #0]
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	e7cb      	b.n	8000e7c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee4:	4c67      	ldr	r4, [pc, #412]	; (8001084 <HAL_RCC_OscConfig+0x274>)
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	f013 0f0c 	tst.w	r3, #12
 8000eec:	d007      	beq.n	8000efe <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d110      	bne.n	8000f1a <HAL_RCC_OscConfig+0x10a>
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	03da      	lsls	r2, r3, #15
 8000efc:	d40d      	bmi.n	8000f1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	079b      	lsls	r3, r3, #30
 8000f02:	d502      	bpl.n	8000f0a <HAL_RCC_OscConfig+0xfa>
 8000f04:	692b      	ldr	r3, [r5, #16]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d186      	bne.n	8000e18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	696a      	ldr	r2, [r5, #20]
 8000f0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	e786      	b.n	8000e28 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1a:	692a      	ldr	r2, [r5, #16]
 8000f1c:	4b5a      	ldr	r3, [pc, #360]	; (8001088 <HAL_RCC_OscConfig+0x278>)
 8000f1e:	b16a      	cbz	r2, 8000f3c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f24:	f7ff fb14 	bl	8000550 <HAL_GetTick>
 8000f28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	079f      	lsls	r7, r3, #30
 8000f2e:	d4ec      	bmi.n	8000f0a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f30:	f7ff fb0e 	bl	8000550 <HAL_GetTick>
 8000f34:	1b80      	subs	r0, r0, r6
 8000f36:	2802      	cmp	r0, #2
 8000f38:	d9f7      	bls.n	8000f2a <HAL_RCC_OscConfig+0x11a>
 8000f3a:	e7ab      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000f3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fb07 	bl	8000550 <HAL_GetTick>
 8000f42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	0798      	lsls	r0, r3, #30
 8000f48:	f57f af6e 	bpl.w	8000e28 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fb00 	bl	8000550 <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9f6      	bls.n	8000f44 <HAL_RCC_OscConfig+0x134>
 8000f56:	e79d      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f58:	69aa      	ldr	r2, [r5, #24]
 8000f5a:	4c4a      	ldr	r4, [pc, #296]	; (8001084 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	4b4b      	ldr	r3, [pc, #300]	; (800108c <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	b1da      	cbz	r2, 8000f98 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f64:	f7ff faf4 	bl	8000550 <HAL_GetTick>
 8000f68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f6c:	079b      	lsls	r3, r3, #30
 8000f6e:	d50d      	bpl.n	8000f8c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_RCC_OscConfig+0x280>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f7c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f7e:	bf00      	nop
  }
  while (Delay --);
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	9201      	str	r2, [sp, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f9      	bne.n	8000f7e <HAL_RCC_OscConfig+0x16e>
 8000f8a:	e751      	b.n	8000e30 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fae0 	bl	8000550 <HAL_GetTick>
 8000f90:	1b80      	subs	r0, r0, r6
 8000f92:	2802      	cmp	r0, #2
 8000f94:	d9e9      	bls.n	8000f6a <HAL_RCC_OscConfig+0x15a>
 8000f96:	e77d      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000f98:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fad9 	bl	8000550 <HAL_GetTick>
 8000f9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fa2:	079f      	lsls	r7, r3, #30
 8000fa4:	f57f af44 	bpl.w	8000e30 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fad2 	bl	8000550 <HAL_GetTick>
 8000fac:	1b80      	subs	r0, r0, r6
 8000fae:	2802      	cmp	r0, #2
 8000fb0:	d9f6      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x190>
 8000fb2:	e76f      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb4:	4c33      	ldr	r4, [pc, #204]	; (8001084 <HAL_RCC_OscConfig+0x274>)
 8000fb6:	69e3      	ldr	r3, [r4, #28]
 8000fb8:	00d8      	lsls	r0, r3, #3
 8000fba:	d424      	bmi.n	8001006 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000fbc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	69e3      	ldr	r3, [r4, #28]
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	61e3      	str	r3, [r4, #28]
 8000fc6:	69e3      	ldr	r3, [r4, #28]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	4e30      	ldr	r6, [pc, #192]	; (8001094 <HAL_RCC_OscConfig+0x284>)
 8000fd2:	6833      	ldr	r3, [r6, #0]
 8000fd4:	05d9      	lsls	r1, r3, #23
 8000fd6:	d518      	bpl.n	800100a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd8:	68eb      	ldr	r3, [r5, #12]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d126      	bne.n	800102c <HAL_RCC_OscConfig+0x21c>
 8000fde:	6a23      	ldr	r3, [r4, #32]
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fab3 	bl	8000550 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fee:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	6a23      	ldr	r3, [r4, #32]
 8000ff2:	079b      	lsls	r3, r3, #30
 8000ff4:	d53f      	bpl.n	8001076 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	f43f af1e 	beq.w	8000e38 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ffc:	69e3      	ldr	r3, [r4, #28]
 8000ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001002:	61e3      	str	r3, [r4, #28]
 8001004:	e718      	b.n	8000e38 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001006:	2700      	movs	r7, #0
 8001008:	e7e2      	b.n	8000fd0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100a:	6833      	ldr	r3, [r6, #0]
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001012:	f7ff fa9d 	bl	8000550 <HAL_GetTick>
 8001016:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	05da      	lsls	r2, r3, #23
 800101c:	d4dc      	bmi.n	8000fd8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff fa97 	bl	8000550 <HAL_GetTick>
 8001022:	eba0 0008 	sub.w	r0, r0, r8
 8001026:	2864      	cmp	r0, #100	; 0x64
 8001028:	d9f6      	bls.n	8001018 <HAL_RCC_OscConfig+0x208>
 800102a:	e733      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	b9ab      	cbnz	r3, 800105a <HAL_RCC_OscConfig+0x24a>
 800102e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6223      	str	r3, [r4, #32]
 800103a:	6a23      	ldr	r3, [r4, #32]
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001042:	f7ff fa85 	bl	8000550 <HAL_GetTick>
 8001046:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001048:	6a23      	ldr	r3, [r4, #32]
 800104a:	0798      	lsls	r0, r3, #30
 800104c:	d5d3      	bpl.n	8000ff6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff fa7f 	bl	8000550 <HAL_GetTick>
 8001052:	1b80      	subs	r0, r0, r6
 8001054:	4540      	cmp	r0, r8
 8001056:	d9f7      	bls.n	8001048 <HAL_RCC_OscConfig+0x238>
 8001058:	e71c      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105a:	2b05      	cmp	r3, #5
 800105c:	6a23      	ldr	r3, [r4, #32]
 800105e:	d103      	bne.n	8001068 <HAL_RCC_OscConfig+0x258>
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6223      	str	r3, [r4, #32]
 8001066:	e7ba      	b.n	8000fde <HAL_RCC_OscConfig+0x1ce>
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6223      	str	r3, [r4, #32]
 800106e:	6a23      	ldr	r3, [r4, #32]
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	e7b6      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fa6b 	bl	8000550 <HAL_GetTick>
 800107a:	eba0 0008 	sub.w	r0, r0, r8
 800107e:	42b0      	cmp	r0, r6
 8001080:	d9b6      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x1e0>
 8001082:	e707      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
 8001084:	40021000 	.word	0x40021000
 8001088:	42420000 	.word	0x42420000
 800108c:	42420480 	.word	0x42420480
 8001090:	20000008 	.word	0x20000008
 8001094:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <HAL_RCC_OscConfig+0x334>)
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	461c      	mov	r4, r3
 800109e:	f002 020c 	and.w	r2, r2, #12
 80010a2:	2a08      	cmp	r2, #8
 80010a4:	d03d      	beq.n	8001122 <HAL_RCC_OscConfig+0x312>
 80010a6:	2300      	movs	r3, #0
 80010a8:	4e27      	ldr	r6, [pc, #156]	; (8001148 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010aa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80010ac:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ae:	d12b      	bne.n	8001108 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80010b0:	f7ff fa4e 	bl	8000550 <HAL_GetTick>
 80010b4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	0199      	lsls	r1, r3, #6
 80010ba:	d41f      	bmi.n	80010fc <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010bc:	6a2b      	ldr	r3, [r5, #32]
 80010be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c2:	d105      	bne.n	80010d0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c4:	6862      	ldr	r2, [r4, #4]
 80010c6:	68a9      	ldr	r1, [r5, #8]
 80010c8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80010cc:	430a      	orrs	r2, r1
 80010ce:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80010d2:	6862      	ldr	r2, [r4, #4]
 80010d4:	430b      	orrs	r3, r1
 80010d6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010da:	4313      	orrs	r3, r2
 80010dc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80010de:	2301      	movs	r3, #1
 80010e0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80010e2:	f7ff fa35 	bl	8000550 <HAL_GetTick>
 80010e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	019a      	lsls	r2, r3, #6
 80010ec:	f53f aea8 	bmi.w	8000e40 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f0:	f7ff fa2e 	bl	8000550 <HAL_GetTick>
 80010f4:	1b40      	subs	r0, r0, r5
 80010f6:	2802      	cmp	r0, #2
 80010f8:	d9f6      	bls.n	80010e8 <HAL_RCC_OscConfig+0x2d8>
 80010fa:	e6cb      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff fa28 	bl	8000550 <HAL_GetTick>
 8001100:	1bc0      	subs	r0, r0, r7
 8001102:	2802      	cmp	r0, #2
 8001104:	d9d7      	bls.n	80010b6 <HAL_RCC_OscConfig+0x2a6>
 8001106:	e6c5      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001108:	f7ff fa22 	bl	8000550 <HAL_GetTick>
 800110c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	019b      	lsls	r3, r3, #6
 8001112:	f57f ae95 	bpl.w	8000e40 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001116:	f7ff fa1b 	bl	8000550 <HAL_GetTick>
 800111a:	1b40      	subs	r0, r0, r5
 800111c:	2802      	cmp	r0, #2
 800111e:	d9f6      	bls.n	800110e <HAL_RCC_OscConfig+0x2fe>
 8001120:	e6b8      	b.n	8000e94 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001122:	2801      	cmp	r0, #1
 8001124:	f43f aeb7 	beq.w	8000e96 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001128:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112a:	6a2b      	ldr	r3, [r5, #32]
 800112c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001130:	429a      	cmp	r2, r3
 8001132:	f47f ae71 	bne.w	8000e18 <HAL_RCC_OscConfig+0x8>
 8001136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001138:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800113c:	1ac0      	subs	r0, r0, r3
 800113e:	bf18      	it	ne
 8001140:	2001      	movne	r0, #1
 8001142:	e6a8      	b.n	8000e96 <HAL_RCC_OscConfig+0x86>
 8001144:	40021000 	.word	0x40021000
 8001148:	42420060 	.word	0x42420060

0800114c <HAL_RCC_GetSysClockFreq>:
{
 800114c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001150:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001152:	ac02      	add	r4, sp, #8
 8001154:	f103 0510 	add.w	r5, r3, #16
 8001158:	4622      	mov	r2, r4
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	6859      	ldr	r1, [r3, #4]
 800115e:	3308      	adds	r3, #8
 8001160:	c203      	stmia	r2!, {r0, r1}
 8001162:	42ab      	cmp	r3, r5
 8001164:	4614      	mov	r4, r2
 8001166:	d1f7      	bne.n	8001158 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001168:	2301      	movs	r3, #1
 800116a:	f88d 3004 	strb.w	r3, [sp, #4]
 800116e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001170:	4911      	ldr	r1, [pc, #68]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001172:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001176:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001178:	f003 020c 	and.w	r2, r3, #12
 800117c:	2a08      	cmp	r2, #8
 800117e:	d117      	bne.n	80011b0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001180:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001184:	a806      	add	r0, sp, #24
 8001186:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001188:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800118a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800118e:	d50c      	bpl.n	80011aa <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001190:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001194:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001198:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800119a:	aa06      	add	r2, sp, #24
 800119c:	4413      	add	r3, r2
 800119e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011a2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80011a6:	b007      	add	sp, #28
 80011a8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_RCC_GetSysClockFreq+0x74>)
 80011ac:	4350      	muls	r0, r2
 80011ae:	e7fa      	b.n	80011a6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80011b2:	e7f8      	b.n	80011a6 <HAL_RCC_GetSysClockFreq+0x5a>
 80011b4:	08002624 	.word	0x08002624
 80011b8:	40021000 	.word	0x40021000
 80011bc:	007a1200 	.word	0x007a1200
 80011c0:	003d0900 	.word	0x003d0900

080011c4 <HAL_RCC_ClockConfig>:
{
 80011c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80011ca:	4604      	mov	r4, r0
 80011cc:	b910      	cbnz	r0, 80011d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
 80011d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4a45      	ldr	r2, [pc, #276]	; (80012ec <HAL_RCC_ClockConfig+0x128>)
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	428b      	cmp	r3, r1
 80011de:	d329      	bcc.n	8001234 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e0:	6821      	ldr	r1, [r4, #0]
 80011e2:	078e      	lsls	r6, r1, #30
 80011e4:	d431      	bmi.n	800124a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e6:	07ca      	lsls	r2, r1, #31
 80011e8:	d444      	bmi.n	8001274 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ea:	4a40      	ldr	r2, [pc, #256]	; (80012ec <HAL_RCC_ClockConfig+0x128>)
 80011ec:	6813      	ldr	r3, [r2, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	429d      	cmp	r5, r3
 80011f4:	d367      	bcc.n	80012c6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	4d3d      	ldr	r5, [pc, #244]	; (80012f0 <HAL_RCC_ClockConfig+0x12c>)
 80011fa:	f012 0f04 	tst.w	r2, #4
 80011fe:	d16e      	bne.n	80012de <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001200:	0713      	lsls	r3, r2, #28
 8001202:	d506      	bpl.n	8001212 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001204:	686b      	ldr	r3, [r5, #4]
 8001206:	6922      	ldr	r2, [r4, #16]
 8001208:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800120c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001210:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001212:	f7ff ff9b 	bl	800114c <HAL_RCC_GetSysClockFreq>
 8001216:	686b      	ldr	r3, [r5, #4]
 8001218:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <HAL_RCC_ClockConfig+0x130>)
 800121a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800121e:	5cd3      	ldrb	r3, [r2, r3]
 8001220:	40d8      	lsrs	r0, r3
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HAL_RCC_ClockConfig+0x134>)
 8001224:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <HAL_RCC_ClockConfig+0x138>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	f7ff f94f 	bl	80004cc <HAL_InitTick>
  return HAL_OK;
 800122e:	2000      	movs	r0, #0
 8001230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001234:	6813      	ldr	r3, [r2, #0]
 8001236:	f023 0307 	bic.w	r3, r3, #7
 800123a:	430b      	orrs	r3, r1
 800123c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	4299      	cmp	r1, r3
 8001246:	d1c2      	bne.n	80011ce <HAL_RCC_ClockConfig+0xa>
 8001248:	e7ca      	b.n	80011e0 <HAL_RCC_ClockConfig+0x1c>
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001250:	bf1e      	ittt	ne
 8001252:	685a      	ldrne	r2, [r3, #4]
 8001254:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001258:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	bf42      	ittt	mi
 800125e:	685a      	ldrmi	r2, [r3, #4]
 8001260:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001264:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	68a0      	ldr	r0, [r4, #8]
 800126a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800126e:	4302      	orrs	r2, r0
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	e7b8      	b.n	80011e6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001274:	6862      	ldr	r2, [r4, #4]
 8001276:	4e1e      	ldr	r6, [pc, #120]	; (80012f0 <HAL_RCC_ClockConfig+0x12c>)
 8001278:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127c:	d11b      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	d0a4      	beq.n	80011ce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001284:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001286:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	4313      	orrs	r3, r2
 8001290:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001292:	f7ff f95d 	bl	8000550 <HAL_GetTick>
 8001296:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001298:	6873      	ldr	r3, [r6, #4]
 800129a:	6862      	ldr	r2, [r4, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012a4:	d0a1      	beq.n	80011ea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a6:	f7ff f953 	bl	8000550 <HAL_GetTick>
 80012aa:	1bc0      	subs	r0, r0, r7
 80012ac:	4540      	cmp	r0, r8
 80012ae:	d9f3      	bls.n	8001298 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80012b0:	2003      	movs	r0, #3
}
 80012b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b6:	2a02      	cmp	r2, #2
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012be:	e7e0      	b.n	8001282 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	f013 0f02 	tst.w	r3, #2
 80012c4:	e7dd      	b.n	8001282 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f023 0307 	bic.w	r3, r3, #7
 80012cc:	432b      	orrs	r3, r5
 80012ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	429d      	cmp	r5, r3
 80012d8:	f47f af79 	bne.w	80011ce <HAL_RCC_ClockConfig+0xa>
 80012dc:	e78b      	b.n	80011f6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012de:	686b      	ldr	r3, [r5, #4]
 80012e0:	68e1      	ldr	r1, [r4, #12]
 80012e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e6:	430b      	orrs	r3, r1
 80012e8:	606b      	str	r3, [r5, #4]
 80012ea:	e789      	b.n	8001200 <HAL_RCC_ClockConfig+0x3c>
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	08002634 	.word	0x08002634
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001302:	4604      	mov	r4, r0
 8001304:	460e      	mov	r6, r1
 8001306:	4615      	mov	r5, r2
 8001308:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800130a:	6821      	ldr	r1, [r4, #0]
 800130c:	688a      	ldr	r2, [r1, #8]
 800130e:	ea36 0302 	bics.w	r3, r6, r2
 8001312:	d001      	beq.n	8001318 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001314:	2000      	movs	r0, #0
}
 8001316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001318:	1c6b      	adds	r3, r5, #1
 800131a:	d0f7      	beq.n	800130c <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800131c:	f7ff f918 	bl	8000550 <HAL_GetTick>
 8001320:	1bc0      	subs	r0, r0, r7
 8001322:	4285      	cmp	r5, r0
 8001324:	d8f1      	bhi.n	800130a <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800132e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001330:	6862      	ldr	r2, [r4, #4]
 8001332:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001336:	d10a      	bne.n	800134e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 8001338:	68a2      	ldr	r2, [r4, #8]
 800133a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800133e:	d002      	beq.n	8001346 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001340:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001344:	d103      	bne.n	800134e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800134c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800134e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001350:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001354:	d107      	bne.n	8001366 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001364:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001366:	2301      	movs	r3, #1
 8001368:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800136c:	2300      	movs	r3, #0
 800136e:	2003      	movs	r0, #3
 8001370:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001376 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001376:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001378:	4613      	mov	r3, r2
 800137a:	460a      	mov	r2, r1
 800137c:	2180      	movs	r1, #128	; 0x80
{
 800137e:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001380:	f7ff ffbe 	bl	8001300 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8001384:	b120      	cbz	r0, 8001390 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001386:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001388:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001390:	bd10      	pop	{r4, pc}

08001392 <HAL_SPI_Init>:
{
 8001392:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001394:	4604      	mov	r4, r0
 8001396:	2800      	cmp	r0, #0
 8001398:	d034      	beq.n	8001404 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800139e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80013a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013a6:	b91b      	cbnz	r3, 80013b0 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80013a8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80013ac:	f001 f85e 	bl	800246c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80013b0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80013b2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80013b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80013b8:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013ba:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80013bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013c0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013c2:	6863      	ldr	r3, [r4, #4]
 80013c4:	69a1      	ldr	r1, [r4, #24]
 80013c6:	4303      	orrs	r3, r0
 80013c8:	68e0      	ldr	r0, [r4, #12]
 80013ca:	4303      	orrs	r3, r0
 80013cc:	6920      	ldr	r0, [r4, #16]
 80013ce:	4303      	orrs	r3, r0
 80013d0:	6960      	ldr	r0, [r4, #20]
 80013d2:	4303      	orrs	r3, r0
 80013d4:	69e0      	ldr	r0, [r4, #28]
 80013d6:	4303      	orrs	r3, r0
 80013d8:	6a20      	ldr	r0, [r4, #32]
 80013da:	4303      	orrs	r3, r0
 80013dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013de:	4303      	orrs	r3, r0
 80013e0:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013e4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013e6:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013e8:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013ec:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013ee:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013f0:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013f2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013f8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80013fa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013fc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013fe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001402:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001404:	2001      	movs	r0, #1
}
 8001406:	bd10      	pop	{r4, pc}

08001408 <HAL_SPI_Transmit>:
{
 8001408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800140c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800140e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001412:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001414:	2b01      	cmp	r3, #1
{
 8001416:	460d      	mov	r5, r1
 8001418:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800141a:	f000 809c 	beq.w	8001556 <HAL_SPI_Transmit+0x14e>
 800141e:	2301      	movs	r3, #1
 8001420:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001424:	f7ff f894 	bl	8000550 <HAL_GetTick>
 8001428:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800142a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800142e:	b2c0      	uxtb	r0, r0
 8001430:	2801      	cmp	r0, #1
 8001432:	f040 808e 	bne.w	8001552 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001436:	2d00      	cmp	r5, #0
 8001438:	d05e      	beq.n	80014f8 <HAL_SPI_Transmit+0xf0>
 800143a:	f1b8 0f00 	cmp.w	r8, #0
 800143e:	d05b      	beq.n	80014f8 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001440:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001442:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001444:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001448:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800144a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800144c:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800144e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001452:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001454:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001456:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001458:	6420      	str	r0, [r4, #64]	; 0x40
 800145a:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800145c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001460:	bf08      	it	eq
 8001462:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001464:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8001466:	bf08      	it	eq
 8001468:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 800146c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001470:	bf08      	it	eq
 8001472:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001474:	6803      	ldr	r3, [r0, #0]
 8001476:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001478:	bf5e      	ittt	pl
 800147a:	6803      	ldrpl	r3, [r0, #0]
 800147c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001480:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001482:	68e3      	ldr	r3, [r4, #12]
 8001484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001488:	6863      	ldr	r3, [r4, #4]
 800148a:	d13e      	bne.n	800150a <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800148c:	b113      	cbz	r3, 8001494 <HAL_SPI_Transmit+0x8c>
 800148e:	f1b8 0f01 	cmp.w	r8, #1
 8001492:	d107      	bne.n	80014a4 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001494:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001498:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800149a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800149c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80014a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b9a3      	cbnz	r3, 80014d4 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80014aa:	463a      	mov	r2, r7
 80014ac:	4631      	mov	r1, r6
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff ff61 	bl	8001376 <SPI_EndRxTxTransaction>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d149      	bne.n	800154c <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014b8:	68a3      	ldr	r3, [r4, #8]
 80014ba:	b933      	cbnz	r3, 80014ca <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	9201      	str	r2, [sp, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80014cc:	3000      	adds	r0, #0
 80014ce:	bf18      	it	ne
 80014d0:	2001      	movne	r0, #1
 80014d2:	e011      	b.n	80014f8 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014d4:	6822      	ldr	r2, [r4, #0]
 80014d6:	6893      	ldr	r3, [r2, #8]
 80014d8:	0798      	lsls	r0, r3, #30
 80014da:	d505      	bpl.n	80014e8 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014de:	f833 1b02 	ldrh.w	r1, [r3], #2
 80014e2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80014e4:	6323      	str	r3, [r4, #48]	; 0x30
 80014e6:	e7d9      	b.n	800149c <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014e8:	f7ff f832 	bl	8000550 <HAL_GetTick>
 80014ec:	1bc0      	subs	r0, r0, r7
 80014ee:	42b0      	cmp	r0, r6
 80014f0:	d3d8      	bcc.n	80014a4 <HAL_SPI_Transmit+0x9c>
 80014f2:	1c71      	adds	r1, r6, #1
 80014f4:	d0d6      	beq.n	80014a4 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 80014f6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80014fe:	2300      	movs	r3, #0
 8001500:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001504:	b002      	add	sp, #8
 8001506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800150a:	b113      	cbz	r3, 8001512 <HAL_SPI_Transmit+0x10a>
 800150c:	f1b8 0f01 	cmp.w	r8, #1
 8001510:	d108      	bne.n	8001524 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001512:	782b      	ldrb	r3, [r5, #0]
 8001514:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001518:	3301      	adds	r3, #1
 800151a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800151c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800151e:	3b01      	subs	r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001524:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001526:	b29b      	uxth	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0be      	beq.n	80014aa <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	0792      	lsls	r2, r2, #30
 8001532:	d503      	bpl.n	800153c <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001534:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	731a      	strb	r2, [r3, #12]
 800153a:	e7ec      	b.n	8001516 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800153c:	f7ff f808 	bl	8000550 <HAL_GetTick>
 8001540:	1bc0      	subs	r0, r0, r7
 8001542:	4286      	cmp	r6, r0
 8001544:	d8ee      	bhi.n	8001524 <HAL_SPI_Transmit+0x11c>
 8001546:	1c73      	adds	r3, r6, #1
 8001548:	d0ec      	beq.n	8001524 <HAL_SPI_Transmit+0x11c>
 800154a:	e7d4      	b.n	80014f6 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800154c:	2320      	movs	r3, #32
 800154e:	6563      	str	r3, [r4, #84]	; 0x54
 8001550:	e7b2      	b.n	80014b8 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8001552:	2002      	movs	r0, #2
 8001554:	e7d0      	b.n	80014f8 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8001556:	2002      	movs	r0, #2
 8001558:	e7d4      	b.n	8001504 <HAL_SPI_Transmit+0xfc>

0800155a <HAL_SPI_TransmitReceive>:
{
 800155a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800155e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001560:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001564:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001566:	2b01      	cmp	r3, #1
{
 8001568:	460d      	mov	r5, r1
 800156a:	4691      	mov	r9, r2
 800156c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800156e:	f000 80e2 	beq.w	8001736 <HAL_SPI_TransmitReceive+0x1dc>
 8001572:	2301      	movs	r3, #1
 8001574:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001578:	f7fe ffea 	bl	8000550 <HAL_GetTick>
  tmp_state           = hspi->State;
 800157c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001580:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8001582:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001584:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8001586:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001588:	d00a      	beq.n	80015a0 <HAL_SPI_TransmitReceive+0x46>
 800158a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800158e:	f040 80d0 	bne.w	8001732 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001592:	68a0      	ldr	r0, [r4, #8]
 8001594:	2800      	cmp	r0, #0
 8001596:	f040 80cc 	bne.w	8001732 <HAL_SPI_TransmitReceive+0x1d8>
 800159a:	2b04      	cmp	r3, #4
 800159c:	f040 80c9 	bne.w	8001732 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	f000 80c4 	beq.w	800172e <HAL_SPI_TransmitReceive+0x1d4>
 80015a6:	f1b9 0f00 	cmp.w	r9, #0
 80015aa:	f000 80c0 	beq.w	800172e <HAL_SPI_TransmitReceive+0x1d4>
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	f000 80bd 	beq.w	800172e <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80015b4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80015b8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80015bc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80015be:	bf1c      	itt	ne
 80015c0:	2305      	movne	r3, #5
 80015c2:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80015ca:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80015cc:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015ce:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80015d0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80015d2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015d4:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80015d6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015d8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80015da:	bf58      	it	pl
 80015dc:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80015de:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80015e0:	bf58      	it	pl
 80015e2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80015e6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80015e8:	bf58      	it	pl
 80015ea:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015ec:	68e2      	ldr	r2, [r4, #12]
 80015ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80015f2:	d158      	bne.n	80016a6 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015f4:	b109      	cbz	r1, 80015fa <HAL_SPI_TransmitReceive+0xa0>
 80015f6:	2e01      	cmp	r6, #1
 80015f8:	d107      	bne.n	800160a <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015fa:	f835 2b02 	ldrh.w	r2, [r5], #2
 80015fe:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001600:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001602:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001604:	3b01      	subs	r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800160a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800160c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800160e:	b29b      	uxth	r3, r3
 8001610:	b9ab      	cbnz	r3, 800163e <HAL_SPI_TransmitReceive+0xe4>
 8001612:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001614:	b29b      	uxth	r3, r3
 8001616:	b993      	cbnz	r3, 800163e <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001618:	4642      	mov	r2, r8
 800161a:	4639      	mov	r1, r7
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff feaa 	bl	8001376 <SPI_EndRxTxTransaction>
 8001622:	2800      	cmp	r0, #0
 8001624:	f040 8081 	bne.w	800172a <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001628:	68a3      	ldr	r3, [r4, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d132      	bne.n	8001694 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	9001      	str	r0, [sp, #4]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	9201      	str	r2, [sp, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	e02a      	b.n	8001694 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	6893      	ldr	r3, [r2, #8]
 8001642:	0799      	lsls	r1, r3, #30
 8001644:	d50d      	bpl.n	8001662 <HAL_SPI_TransmitReceive+0x108>
 8001646:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001648:	b29b      	uxth	r3, r3
 800164a:	b153      	cbz	r3, 8001662 <HAL_SPI_TransmitReceive+0x108>
 800164c:	b14d      	cbz	r5, 8001662 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 800164e:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001650:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001652:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001656:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001658:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800165a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800165c:	3b01      	subs	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001662:	6893      	ldr	r3, [r2, #8]
 8001664:	07db      	lsls	r3, r3, #31
 8001666:	d50c      	bpl.n	8001682 <HAL_SPI_TransmitReceive+0x128>
 8001668:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800166a:	b29b      	uxth	r3, r3
 800166c:	b14b      	cbz	r3, 8001682 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800166e:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001670:	68d2      	ldr	r2, [r2, #12]
 8001672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001674:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001678:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800167a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800167c:	3b01      	subs	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001682:	f7fe ff65 	bl	8000550 <HAL_GetTick>
 8001686:	eba0 0008 	sub.w	r0, r0, r8
 800168a:	4287      	cmp	r7, r0
 800168c:	d8be      	bhi.n	800160c <HAL_SPI_TransmitReceive+0xb2>
 800168e:	1c7e      	adds	r6, r7, #1
 8001690:	d0bc      	beq.n	800160c <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001692:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001694:	2301      	movs	r3, #1
 8001696:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800169a:	2300      	movs	r3, #0
 800169c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80016a0:	b003      	add	sp, #12
 80016a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016a6:	b109      	cbz	r1, 80016ac <HAL_SPI_TransmitReceive+0x152>
 80016a8:	2e01      	cmp	r6, #1
 80016aa:	d108      	bne.n	80016be <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016ac:	782a      	ldrb	r2, [r5, #0]
 80016ae:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80016b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016b2:	3301      	adds	r3, #1
 80016b4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80016b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80016be:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	b91b      	cbnz	r3, 80016ce <HAL_SPI_TransmitReceive+0x174>
 80016c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0a4      	beq.n	8001618 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016ce:	6822      	ldr	r2, [r4, #0]
 80016d0:	6893      	ldr	r3, [r2, #8]
 80016d2:	0798      	lsls	r0, r3, #30
 80016d4:	d50e      	bpl.n	80016f4 <HAL_SPI_TransmitReceive+0x19a>
 80016d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b15b      	cbz	r3, 80016f4 <HAL_SPI_TransmitReceive+0x19a>
 80016dc:	b155      	cbz	r5, 80016f4 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80016de:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80016e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80016e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016e8:	3301      	adds	r3, #1
 80016ea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80016ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80016f4:	6822      	ldr	r2, [r4, #0]
 80016f6:	6893      	ldr	r3, [r2, #8]
 80016f8:	07d9      	lsls	r1, r3, #31
 80016fa:	d50d      	bpl.n	8001718 <HAL_SPI_TransmitReceive+0x1be>
 80016fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b153      	cbz	r3, 8001718 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8001702:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001704:	68d2      	ldr	r2, [r2, #12]
 8001706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001708:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800170a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800170c:	3301      	adds	r3, #1
 800170e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001710:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001712:	3b01      	subs	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001718:	f7fe ff1a 	bl	8000550 <HAL_GetTick>
 800171c:	eba0 0008 	sub.w	r0, r0, r8
 8001720:	4287      	cmp	r7, r0
 8001722:	d8cd      	bhi.n	80016c0 <HAL_SPI_TransmitReceive+0x166>
 8001724:	1c7b      	adds	r3, r7, #1
 8001726:	d0cb      	beq.n	80016c0 <HAL_SPI_TransmitReceive+0x166>
 8001728:	e7b3      	b.n	8001692 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800172a:	2320      	movs	r3, #32
 800172c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800172e:	2001      	movs	r0, #1
 8001730:	e7b0      	b.n	8001694 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8001732:	2002      	movs	r0, #2
 8001734:	e7ae      	b.n	8001694 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8001736:	2002      	movs	r0, #2
 8001738:	e7b2      	b.n	80016a0 <HAL_SPI_TransmitReceive+0x146>

0800173a <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800173a:	b148      	cbz	r0, 8001750 <null_ptr_check+0x16>
 800173c:	6843      	ldr	r3, [r0, #4]
 800173e:	b13b      	cbz	r3, 8001750 <null_ptr_check+0x16>
 8001740:	6883      	ldr	r3, [r0, #8]
 8001742:	b12b      	cbz	r3, 8001750 <null_ptr_check+0x16>
 8001744:	68c0      	ldr	r0, [r0, #12]
 8001746:	fab0 f080 	clz	r0, r0
 800174a:	0940      	lsrs	r0, r0, #5
 800174c:	4240      	negs	r0, r0
 800174e:	4770      	bx	lr
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        /* Device structure is fine */
        rslt = BME280_OK;
    }

    return rslt;
}
 8001754:	4770      	bx	lr

08001756 <bme280_get_regs>:
{
 8001756:	b570      	push	{r4, r5, r6, lr}
 8001758:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 800175a:	4618      	mov	r0, r3
{
 800175c:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 800175e:	f7ff ffec 	bl	800173a <null_ptr_check>
    if (rslt == BME280_OK)
 8001762:	b970      	cbnz	r0, 8001782 <bme280_get_regs+0x2c>
        if (dev->intf != BME280_I2C_INTF)
 8001764:	78a3      	ldrb	r3, [r4, #2]
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001766:	6866      	ldr	r6, [r4, #4]
        if (dev->intf != BME280_I2C_INTF)
 8001768:	2b01      	cmp	r3, #1
            reg_addr = reg_addr | 0x80;
 800176a:	bf18      	it	ne
 800176c:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001770:	4613      	mov	r3, r2
 8001772:	7860      	ldrb	r0, [r4, #1]
 8001774:	460a      	mov	r2, r1
 8001776:	4629      	mov	r1, r5
 8001778:	47b0      	blx	r6
            rslt = BME280_E_COMM_FAIL;
 800177a:	2800      	cmp	r0, #0
 800177c:	bf18      	it	ne
 800177e:	f06f 0003 	mvnne.w	r0, #3
}
 8001782:	bd70      	pop	{r4, r5, r6, pc}

08001784 <bme280_set_regs>:
{
 8001784:	2a0a      	cmp	r2, #10
 8001786:	bf28      	it	cs
 8001788:	220a      	movcs	r2, #10
 800178a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178c:	4605      	mov	r5, r0
 800178e:	b087      	sub	sp, #28
    rslt = null_ptr_check(dev);
 8001790:	4618      	mov	r0, r3
{
 8001792:	461e      	mov	r6, r3
 8001794:	4614      	mov	r4, r2
    rslt = null_ptr_check(dev);
 8001796:	f7ff ffd0 	bl	800173a <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800179a:	2800      	cmp	r0, #0
 800179c:	d136      	bne.n	800180c <bme280_set_regs+0x88>
 800179e:	2d00      	cmp	r5, #0
 80017a0:	d034      	beq.n	800180c <bme280_set_regs+0x88>
 80017a2:	2900      	cmp	r1, #0
 80017a4:	d032      	beq.n	800180c <bme280_set_regs+0x88>
        if (len != 0)
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d033      	beq.n	8001812 <bme280_set_regs+0x8e>
            temp_buff[0] = reg_data[0];
 80017aa:	780b      	ldrb	r3, [r1, #0]
 80017ac:	f88d 3004 	strb.w	r3, [sp, #4]
            if (dev->intf != BME280_I2C_INTF)
 80017b0:	78b3      	ldrb	r3, [r6, #2]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10d      	bne.n	80017d2 <bme280_set_regs+0x4e>
            if (len > 1)
 80017b6:	2c01      	cmp	r4, #1
 80017b8:	aa01      	add	r2, sp, #4
 80017ba:	d116      	bne.n	80017ea <bme280_set_regs+0x66>
                temp_len = len;
 80017bc:	4623      	mov	r3, r4
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80017be:	68b4      	ldr	r4, [r6, #8]
 80017c0:	7829      	ldrb	r1, [r5, #0]
 80017c2:	7870      	ldrb	r0, [r6, #1]
 80017c4:	47a0      	blx	r4
                rslt = BME280_E_COMM_FAIL;
 80017c6:	2800      	cmp	r0, #0
 80017c8:	bf18      	it	ne
 80017ca:	f06f 0003 	mvnne.w	r0, #3
}
 80017ce:	b007      	add	sp, #28
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	1e63      	subs	r3, r4, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	1e6a      	subs	r2, r5, #1
 80017d8:	442b      	add	r3, r5
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80017da:	7850      	ldrb	r0, [r2, #1]
 80017dc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80017e0:	f802 0f01 	strb.w	r0, [r2, #1]!
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1f8      	bne.n	80017da <bme280_set_regs+0x56>
 80017e8:	e7e5      	b.n	80017b6 <bme280_set_regs+0x32>
 80017ea:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80017ec:	5cef      	ldrb	r7, [r5, r3]
 80017ee:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80017f2:	f800 7c01 	strb.w	r7, [r0, #-1]
        temp_buff[index * 2] = reg_data[index];
 80017f6:	5cc8      	ldrb	r0, [r1, r3]
 80017f8:	f802 0013 	strb.w	r0, [r2, r3, lsl #1]
 80017fc:	3301      	adds	r3, #1
    for (index = 1; index < len; index++)
 80017fe:	b2d8      	uxtb	r0, r3
 8001800:	42a0      	cmp	r0, r4
 8001802:	d3f3      	bcc.n	80017ec <bme280_set_regs+0x68>
                temp_len = ((len * 2) - 1);
 8001804:	0064      	lsls	r4, r4, #1
 8001806:	3c01      	subs	r4, #1
 8001808:	b2a3      	uxth	r3, r4
 800180a:	e7d8      	b.n	80017be <bme280_set_regs+0x3a>
        rslt = BME280_E_NULL_PTR;
 800180c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001810:	e7dd      	b.n	80017ce <bme280_set_regs+0x4a>
            rslt = BME280_E_INVALID_LEN;
 8001812:	f06f 0002 	mvn.w	r0, #2
 8001816:	e7da      	b.n	80017ce <bme280_set_regs+0x4a>

08001818 <set_osr_humidity_settings.isra.8>:
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 8001818:	b513      	push	{r0, r1, r4, lr}
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800181a:	23f2      	movs	r3, #242	; 0xf2
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 800181c:	460c      	mov	r4, r1
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800181e:	f000 0007 	and.w	r0, r0, #7
 8001822:	a902      	add	r1, sp, #8
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001824:	f88d 3007 	strb.w	r3, [sp, #7]
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001828:	f801 0d03 	strb.w	r0, [r1, #-3]!
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800182c:	4623      	mov	r3, r4
 800182e:	2201      	movs	r2, #1
 8001830:	f10d 0007 	add.w	r0, sp, #7
 8001834:	f7ff ffa6 	bl	8001784 <bme280_set_regs>
    if (rslt == BME280_OK)
 8001838:	b988      	cbnz	r0, 800185e <set_osr_humidity_settings.isra.8+0x46>
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800183a:	20f4      	movs	r0, #244	; 0xf4
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800183c:	4623      	mov	r3, r4
 800183e:	2201      	movs	r2, #1
 8001840:	f10d 0106 	add.w	r1, sp, #6
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8001844:	f88d 0007 	strb.w	r0, [sp, #7]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001848:	f7ff ff85 	bl	8001756 <bme280_get_regs>
        if (rslt == BME280_OK)
 800184c:	b938      	cbnz	r0, 800185e <set_osr_humidity_settings.isra.8+0x46>
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800184e:	4623      	mov	r3, r4
 8001850:	2201      	movs	r2, #1
 8001852:	f10d 0106 	add.w	r1, sp, #6
 8001856:	f10d 0007 	add.w	r0, sp, #7
 800185a:	f7ff ff93 	bl	8001784 <bme280_set_regs>
}
 800185e:	b002      	add	sp, #8
 8001860:	bd10      	pop	{r4, pc}

08001862 <set_osr_press_temp_settings>:
{
 8001862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001864:	4606      	mov	r6, r0
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001866:	20f4      	movs	r0, #244	; 0xf4
{
 8001868:	460d      	mov	r5, r1
 800186a:	4614      	mov	r4, r2
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800186c:	4613      	mov	r3, r2
 800186e:	f10d 0107 	add.w	r1, sp, #7
 8001872:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001874:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001878:	f7ff ff6d 	bl	8001756 <bme280_get_regs>
    if (rslt == BME280_OK)
 800187c:	b9f8      	cbnz	r0, 80018be <set_osr_press_temp_settings+0x5c>
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800187e:	07f2      	lsls	r2, r6, #31
 8001880:	d50a      	bpl.n	8001898 <set_osr_press_temp_settings+0x36>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001882:	782b      	ldrb	r3, [r5, #0]
 8001884:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f003 031c 	and.w	r3, r3, #28
 800188e:	f022 021c 	bic.w	r2, r2, #28
 8001892:	4313      	orrs	r3, r2
 8001894:	f88d 3007 	strb.w	r3, [sp, #7]
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8001898:	07b3      	lsls	r3, r6, #30
 800189a:	d508      	bpl.n	80018ae <set_osr_press_temp_settings+0x4c>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800189c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80018a0:	786a      	ldrb	r2, [r5, #1]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80018aa:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80018ae:	4623      	mov	r3, r4
 80018b0:	2201      	movs	r2, #1
 80018b2:	f10d 0107 	add.w	r1, sp, #7
 80018b6:	f10d 0006 	add.w	r0, sp, #6
 80018ba:	f7ff ff63 	bl	8001784 <bme280_set_regs>
}
 80018be:	b002      	add	sp, #8
 80018c0:	bd70      	pop	{r4, r5, r6, pc}

080018c2 <set_filter_standby_settings>:
{
 80018c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018c4:	4606      	mov	r6, r0
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80018c6:	20f5      	movs	r0, #245	; 0xf5
{
 80018c8:	460d      	mov	r5, r1
 80018ca:	4614      	mov	r4, r2
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80018cc:	4613      	mov	r3, r2
 80018ce:	f10d 0107 	add.w	r1, sp, #7
 80018d2:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80018d4:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80018d8:	f7ff ff3d 	bl	8001756 <bme280_get_regs>
    if (rslt == BME280_OK)
 80018dc:	b9f8      	cbnz	r0, 800191e <set_filter_standby_settings+0x5c>
        if (desired_settings & BME280_FILTER_SEL)
 80018de:	0732      	lsls	r2, r6, #28
 80018e0:	d50a      	bpl.n	80018f8 <set_filter_standby_settings+0x36>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80018e2:	78eb      	ldrb	r3, [r5, #3]
 80018e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	f003 031c 	and.w	r3, r3, #28
 80018ee:	f022 021c 	bic.w	r2, r2, #28
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (desired_settings & BME280_STANDBY_SEL)
 80018f8:	06f3      	lsls	r3, r6, #27
 80018fa:	d508      	bpl.n	800190e <set_filter_standby_settings+0x4c>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80018fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001900:	792a      	ldrb	r2, [r5, #4]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800190a:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800190e:	4623      	mov	r3, r4
 8001910:	2201      	movs	r2, #1
 8001912:	f10d 0107 	add.w	r1, sp, #7
 8001916:	f10d 0006 	add.w	r0, sp, #6
 800191a:	f7ff ff33 	bl	8001784 <bme280_set_regs>
}
 800191e:	b002      	add	sp, #8
 8001920:	bd70      	pop	{r4, r5, r6, pc}

08001922 <bme280_get_sensor_mode>:
{
 8001922:	b510      	push	{r4, lr}
 8001924:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 8001926:	4608      	mov	r0, r1
 8001928:	f7ff ff07 	bl	800173a <null_ptr_check>
    if (rslt == BME280_OK)
 800192c:	b948      	cbnz	r0, 8001942 <bme280_get_sensor_mode+0x20>
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800192e:	460b      	mov	r3, r1
 8001930:	2201      	movs	r2, #1
 8001932:	4621      	mov	r1, r4
 8001934:	20f4      	movs	r0, #244	; 0xf4
 8001936:	f7ff ff0e 	bl	8001756 <bme280_get_regs>
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800193a:	7823      	ldrb	r3, [r4, #0]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	7023      	strb	r3, [r4, #0]
}
 8001942:	bd10      	pop	{r4, pc}

08001944 <bme280_soft_reset>:
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001944:	23e0      	movs	r3, #224	; 0xe0
{
 8001946:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001948:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8_t status_reg = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001952:	23b6      	movs	r3, #182	; 0xb6
{
 8001954:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001956:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 800195a:	f7ff feee 	bl	800173a <null_ptr_check>
    if (rslt == BME280_OK)
 800195e:	bb08      	cbnz	r0, 80019a4 <bme280_soft_reset+0x60>
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001960:	462b      	mov	r3, r5
 8001962:	2201      	movs	r2, #1
 8001964:	f10d 0107 	add.w	r1, sp, #7
 8001968:	f10d 0005 	add.w	r0, sp, #5
 800196c:	f7ff ff0a 	bl	8001784 <bme280_set_regs>
        if (rslt == BME280_OK)
 8001970:	b9c0      	cbnz	r0, 80019a4 <bme280_soft_reset+0x60>
 8001972:	2406      	movs	r4, #6
                dev->delay_ms(2);
 8001974:	68eb      	ldr	r3, [r5, #12]
 8001976:	2002      	movs	r0, #2
 8001978:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 800197a:	462b      	mov	r3, r5
 800197c:	2201      	movs	r2, #1
 800197e:	f10d 0106 	add.w	r1, sp, #6
 8001982:	20f3      	movs	r0, #243	; 0xf3
 8001984:	f7ff fee7 	bl	8001756 <bme280_get_regs>
 8001988:	f89d 3006 	ldrb.w	r3, [sp, #6]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 800198c:	b928      	cbnz	r0, 800199a <bme280_soft_reset+0x56>
 800198e:	3c01      	subs	r4, #1
 8001990:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001994:	d001      	beq.n	800199a <bme280_soft_reset+0x56>
 8001996:	07da      	lsls	r2, r3, #31
 8001998:	d4ec      	bmi.n	8001974 <bme280_soft_reset+0x30>
                rslt = BME280_E_NVM_COPY_FAILED;
 800199a:	f013 0f01 	tst.w	r3, #1
 800199e:	bf18      	it	ne
 80019a0:	f06f 0005 	mvnne.w	r0, #5
}
 80019a4:	b003      	add	sp, #12
 80019a6:	bd30      	pop	{r4, r5, pc}

080019a8 <bme280_init>:
    uint8_t chip_id = 0;
 80019a8:	2300      	movs	r3, #0
{
 80019aa:	b530      	push	{r4, r5, lr}
 80019ac:	b089      	sub	sp, #36	; 0x24
 80019ae:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 80019b0:	f88d 3003 	strb.w	r3, [sp, #3]
    rslt = null_ptr_check(dev);
 80019b4:	f7ff fec1 	bl	800173a <null_ptr_check>
    if (rslt == BME280_OK)
 80019b8:	2800      	cmp	r0, #0
 80019ba:	f040 80a1 	bne.w	8001b00 <bme280_init+0x158>
 80019be:	2505      	movs	r5, #5
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80019c0:	4623      	mov	r3, r4
 80019c2:	2201      	movs	r2, #1
 80019c4:	f10d 0103 	add.w	r1, sp, #3
 80019c8:	20d0      	movs	r0, #208	; 0xd0
 80019ca:	f7ff fec4 	bl	8001756 <bme280_get_regs>
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 80019ce:	2800      	cmp	r0, #0
 80019d0:	f040 8098 	bne.w	8001b04 <bme280_init+0x15c>
 80019d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019d8:	2b60      	cmp	r3, #96	; 0x60
 80019da:	f040 8093 	bne.w	8001b04 <bme280_init+0x15c>
                dev->chip_id = chip_id;
 80019de:	7023      	strb	r3, [r4, #0]
                rslt = bme280_soft_reset(dev);
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff ffaf 	bl	8001944 <bme280_soft_reset>
                if (rslt == BME280_OK)
 80019e6:	2800      	cmp	r0, #0
 80019e8:	f040 808a 	bne.w	8001b00 <bme280_init+0x158>
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80019ec:	4601      	mov	r1, r0
 80019ee:	221a      	movs	r2, #26
 80019f0:	a801      	add	r0, sp, #4
 80019f2:	f000 fe02 	bl	80025fa <memset>
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80019f6:	4623      	mov	r3, r4
 80019f8:	221a      	movs	r2, #26
 80019fa:	a901      	add	r1, sp, #4
 80019fc:	2088      	movs	r0, #136	; 0x88
 80019fe:	f7ff feaa 	bl	8001756 <bme280_get_regs>
    if (rslt == BME280_OK)
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d17c      	bne.n	8001b00 <bme280_init+0x158>
    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001a06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001a0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001a0e:	a901      	add	r1, sp, #4
    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a14:	8223      	strh	r3, [r4, #16]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001a16:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001a1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001a1e:	20e1      	movs	r0, #225	; 0xe1
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001a20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a24:	8263      	strh	r3, [r4, #18]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001a26:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001a2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001a2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a32:	82a3      	strh	r3, [r4, #20]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001a34:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001a38:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001a3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a40:	82e3      	strh	r3, [r4, #22]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001a42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001a46:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001a4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a4e:	8323      	strh	r3, [r4, #24]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001a50:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001a54:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001a58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a5c:	8363      	strh	r3, [r4, #26]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001a5e:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001a62:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001a66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a6a:	83a3      	strh	r3, [r4, #28]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001a6c:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8001a70:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a78:	83e3      	strh	r3, [r4, #30]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001a7a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001a7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a86:	8423      	strh	r3, [r4, #32]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001a88:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8001a8c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a94:	8463      	strh	r3, [r4, #34]	; 0x22
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8001a96:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8001a9a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001aa2:	84a3      	strh	r3, [r4, #36]	; 0x24
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8001aa4:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8001aa8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ab0:	84e3      	strh	r3, [r4, #38]	; 0x26
    calib_data->dig_H1 = reg_data[25];
 8001ab2:	f89d 301d 	ldrb.w	r3, [sp, #29]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001ab6:	2207      	movs	r2, #7
    calib_data->dig_H1 = reg_data[25];
 8001ab8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001abc:	4623      	mov	r3, r4
 8001abe:	f7ff fe4a 	bl	8001756 <bme280_get_regs>
        if (rslt == BME280_OK)
 8001ac2:	b9e8      	cbnz	r0, 8001b00 <bme280_init+0x158>
    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001ac4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001ac8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8001acc:	f99d 1007 	ldrsb.w	r1, [sp, #7]
    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001ad0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ad4:	8563      	strh	r3, [r4, #42]	; 0x2a
    calib_data->dig_H3 = reg_data[2];
 8001ad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ada:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8001ade:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001ae2:	f003 020f 	and.w	r2, r3, #15
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8001ae6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8001aea:	85e2      	strh	r2, [r4, #46]	; 0x2e
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001aec:	f99d 2009 	ldrsb.w	r2, [sp, #9]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8001af0:	091b      	lsrs	r3, r3, #4
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8001af2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001af6:	8623      	strh	r3, [r4, #48]	; 0x30
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8001af8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001afc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8001b00:	b009      	add	sp, #36	; 0x24
 8001b02:	bd30      	pop	{r4, r5, pc}
            dev->delay_ms(1);
 8001b04:	68e3      	ldr	r3, [r4, #12]
 8001b06:	2001      	movs	r0, #1
 8001b08:	3d01      	subs	r5, #1
 8001b0a:	4798      	blx	r3
        while (try_count)
 8001b0c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001b10:	f47f af56 	bne.w	80019c0 <bme280_init+0x18>
            rslt = BME280_E_DEV_NOT_FOUND;
 8001b14:	f06f 0001 	mvn.w	r0, #1
 8001b18:	e7f2      	b.n	8001b00 <bme280_init+0x158>

08001b1a <put_device_to_sleep>:
{
 8001b1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001b1c:	2204      	movs	r2, #4
{
 8001b1e:	4604      	mov	r4, r0
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001b20:	4603      	mov	r3, r0
 8001b22:	eb0d 0102 	add.w	r1, sp, r2
 8001b26:	20f2      	movs	r0, #242	; 0xf2
 8001b28:	f7ff fe15 	bl	8001756 <bme280_get_regs>
    if (rslt == BME280_OK)
 8001b2c:	bb58      	cbnz	r0, 8001b86 <put_device_to_sleep+0x6c>
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001b2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
        rslt = bme280_soft_reset(dev);
 8001b32:	4620      	mov	r0, r4
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	f88d 300a 	strb.w	r3, [sp, #10]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001b3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001b40:	f3c3 0282 	ubfx	r2, r3, #2, #3
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001b44:	095b      	lsrs	r3, r3, #5
 8001b46:	f88d 3009 	strb.w	r3, [sp, #9]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001b4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001b4e:	f88d 2008 	strb.w	r2, [sp, #8]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001b52:	f3c3 0282 	ubfx	r2, r3, #2, #3
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001b56:	095b      	lsrs	r3, r3, #5
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001b58:	f88d 200b 	strb.w	r2, [sp, #11]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001b5c:	f88d 300c 	strb.w	r3, [sp, #12]
        rslt = bme280_soft_reset(dev);
 8001b60:	f7ff fef0 	bl	8001944 <bme280_soft_reset>
        if (rslt == BME280_OK)
 8001b64:	b978      	cbnz	r0, 8001b86 <put_device_to_sleep+0x6c>
        rslt = set_osr_humidity_settings(settings, dev);
 8001b66:	4621      	mov	r1, r4
 8001b68:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8001b6c:	f7ff fe54 	bl	8001818 <set_osr_humidity_settings.isra.8>
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001b70:	4622      	mov	r2, r4
 8001b72:	a902      	add	r1, sp, #8
 8001b74:	201f      	movs	r0, #31
 8001b76:	f7ff fe74 	bl	8001862 <set_osr_press_temp_settings>
    if (rslt == BME280_OK)
 8001b7a:	b920      	cbnz	r0, 8001b86 <put_device_to_sleep+0x6c>
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	a902      	add	r1, sp, #8
 8001b80:	201f      	movs	r0, #31
 8001b82:	f7ff fe9e 	bl	80018c2 <set_filter_standby_settings>
}
 8001b86:	b004      	add	sp, #16
 8001b88:	bd10      	pop	{r4, pc}

08001b8a <bme280_set_sensor_settings>:
{
 8001b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b8c:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
 8001b8e:	4608      	mov	r0, r1
{
 8001b90:	460c      	mov	r4, r1
    rslt = null_ptr_check(dev);
 8001b92:	f7ff fdd2 	bl	800173a <null_ptr_check>
    if (rslt == BME280_OK)
 8001b96:	4605      	mov	r5, r0
 8001b98:	b968      	cbnz	r0, 8001bb6 <bme280_set_sensor_settings+0x2c>
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001b9a:	f10d 0007 	add.w	r0, sp, #7
 8001b9e:	f7ff fec0 	bl	8001922 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	b938      	cbnz	r0, 8001bb6 <bme280_set_sensor_settings+0x2c>
 8001ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001baa:	b93b      	cbnz	r3, 8001bbc <bme280_set_sensor_settings+0x32>
    if (sub_settings & desired_settings)
 8001bac:	0771      	lsls	r1, r6, #29
 8001bae:	d11c      	bne.n	8001bea <bme280_set_sensor_settings+0x60>
 8001bb0:	f016 0f18 	tst.w	r6, #24
 8001bb4:	d11d      	bne.n	8001bf2 <bme280_set_sensor_settings+0x68>
}
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
            rslt = put_device_to_sleep(dev);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff ffac 	bl	8001b1a <put_device_to_sleep>
        if (rslt == BME280_OK)
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d0f2      	beq.n	8001bac <bme280_set_sensor_settings+0x22>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001bc6:	4605      	mov	r5, r0
    return rslt;
 8001bc8:	e7f5      	b.n	8001bb6 <bme280_set_sensor_settings+0x2c>
        rslt = set_osr_humidity_settings(settings, dev);
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 8001bd0:	f7ff fe22 	bl	8001818 <set_osr_humidity_settings.isra.8>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001bd4:	07b2      	lsls	r2, r6, #30
 8001bd6:	d005      	beq.n	8001be4 <bme280_set_sensor_settings+0x5a>
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001bd8:	4622      	mov	r2, r4
 8001bda:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8001bde:	4630      	mov	r0, r6
 8001be0:	f7ff fe3f 	bl	8001862 <set_osr_press_temp_settings>
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d1ee      	bne.n	8001bc6 <bme280_set_sensor_settings+0x3c>
 8001be8:	e7e2      	b.n	8001bb0 <bme280_set_sensor_settings+0x26>
    if (desired_settings & BME280_OSR_HUM_SEL)
 8001bea:	0773      	lsls	r3, r6, #29
 8001bec:	d4ed      	bmi.n	8001bca <bme280_set_sensor_settings+0x40>
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e7f0      	b.n	8001bd4 <bme280_set_sensor_settings+0x4a>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f7ff fe62 	bl	80018c2 <set_filter_standby_settings>
 8001bfe:	e7e2      	b.n	8001bc6 <bme280_set_sensor_settings+0x3c>

08001c00 <bme280_set_sensor_mode>:
{
 8001c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c02:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 8001c04:	4608      	mov	r0, r1
{
 8001c06:	460c      	mov	r4, r1
    rslt = null_ptr_check(dev);
 8001c08:	f7ff fd97 	bl	800173a <null_ptr_check>
    if (rslt == BME280_OK)
 8001c0c:	bb40      	cbnz	r0, 8001c60 <bme280_set_sensor_mode+0x60>
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001c0e:	f10d 0005 	add.w	r0, sp, #5
 8001c12:	f7ff fe86 	bl	8001922 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001c16:	bb18      	cbnz	r0, 8001c60 <bme280_set_sensor_mode+0x60>
 8001c18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001c1c:	b9db      	cbnz	r3, 8001c56 <bme280_set_sensor_mode+0x56>
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001c1e:	20f4      	movs	r0, #244	; 0xf4
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001c20:	4623      	mov	r3, r4
 8001c22:	2201      	movs	r2, #1
 8001c24:	f10d 0107 	add.w	r1, sp, #7
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001c28:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001c2c:	f7ff fd93 	bl	8001756 <bme280_get_regs>
    if (rslt == BME280_OK)
 8001c30:	b9b0      	cbnz	r0, 8001c60 <bme280_set_sensor_mode+0x60>
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001c32:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c36:	f005 0503 	and.w	r5, r5, #3
 8001c3a:	f020 0003 	bic.w	r0, r0, #3
 8001c3e:	4328      	orrs	r0, r5
 8001c40:	f88d 0007 	strb.w	r0, [sp, #7]
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001c44:	4623      	mov	r3, r4
 8001c46:	2201      	movs	r2, #1
 8001c48:	f10d 0107 	add.w	r1, sp, #7
 8001c4c:	f10d 0006 	add.w	r0, sp, #6
 8001c50:	f7ff fd98 	bl	8001784 <bme280_set_regs>
 8001c54:	e004      	b.n	8001c60 <bme280_set_sensor_mode+0x60>
            rslt = put_device_to_sleep(dev);
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff ff5f 	bl	8001b1a <put_device_to_sleep>
        if (rslt == BME280_OK)
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d0de      	beq.n	8001c1e <bme280_set_sensor_mode+0x1e>
}
 8001c60:	b003      	add	sp, #12
 8001c62:	bd30      	pop	{r4, r5, pc}

08001c64 <bme280_parse_sensor_data>:
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001c64:	7843      	ldrb	r3, [r0, #1]
    data_msb = (uint32_t)reg_data[0] << 12;
 8001c66:	7802      	ldrb	r2, [r0, #0]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001c68:	011b      	lsls	r3, r3, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001c6a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001c6e:	7882      	ldrb	r2, [r0, #2]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001c70:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001c74:	600b      	str	r3, [r1, #0]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8001c76:	7903      	ldrb	r3, [r0, #4]
    data_msb = (uint32_t)reg_data[3] << 12;
 8001c78:	78c2      	ldrb	r2, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8001c7a:	011b      	lsls	r3, r3, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001c7c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001c80:	7942      	ldrb	r2, [r0, #5]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001c82:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001c86:	604b      	str	r3, [r1, #4]
    data_lsb = (uint32_t)reg_data[6] << 8;
 8001c88:	7982      	ldrb	r2, [r0, #6]
    data_msb = (uint32_t)reg_data[7];
 8001c8a:	79c3      	ldrb	r3, [r0, #7]
    uncomp_data->humidity = data_msb | data_lsb;
 8001c8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c90:	608b      	str	r3, [r1, #8]
 8001c92:	4770      	bx	lr

08001c94 <bme280_compensate_data>:
{
 8001c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c98:	4615      	mov	r5, r2
 8001c9a:	9001      	str	r0, [sp, #4]
 8001c9c:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001c9e:	468a      	mov	sl, r1
 8001ca0:	2900      	cmp	r1, #0
 8001ca2:	f000 8187 	beq.w	8001fb4 <bme280_compensate_data+0x320>
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	f000 8184 	beq.w	8001fb4 <bme280_compensate_data+0x320>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8181 	beq.w	8001fb4 <bme280_compensate_data+0x320>
        comp_data->temperature = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6053      	str	r3, [r2, #4]
        comp_data->pressure = 0;
 8001cb6:	6013      	str	r3, [r2, #0]
        comp_data->humidity = 0;
 8001cb8:	6093      	str	r3, [r2, #8]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001cba:	0742      	lsls	r2, r0, #29
 8001cbc:	d029      	beq.n	8001d12 <bme280_compensate_data+0x7e>
 8001cbe:	6848      	ldr	r0, [r1, #4]
    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001cc0:	8822      	ldrh	r2, [r4, #0]
 8001cc2:	0053      	lsls	r3, r2, #1
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001cc4:	ebc2 1210 	rsb	r2, r2, r0, lsr #4
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001cc8:	4352      	muls	r2, r2
    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001cca:	ebc3 01d0 	rsb	r1, r3, r0, lsr #3
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001cce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001cd2:	1312      	asrs	r2, r2, #12
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001cd4:	434b      	muls	r3, r1
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001cd6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8001cda:	434a      	muls	r2, r1
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce0:	fb93 f3f1 	sdiv	r3, r3, r1
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce8:	fb92 f2f1 	sdiv	r2, r2, r1
    calib_data->t_fine = var1 + var2;
 8001cec:	4413      	add	r3, r2
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001cee:	f44f 7280 	mov.w	r2, #256	; 0x100
    calib_data->t_fine = var1 + var2;
 8001cf2:	6263      	str	r3, [r4, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001cf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cf8:	3380      	adds	r3, #128	; 0x80
 8001cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8001cfe:	f242 1234 	movw	r2, #8500	; 0x2134
 8001d02:	4293      	cmp	r3, r2
 8001d04:	bfa8      	it	ge
 8001d06:	4613      	movge	r3, r2
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001d08:	4aac      	ldr	r2, [pc, #688]	; (8001fbc <bme280_compensate_data+0x328>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	bfac      	ite	ge
 8001d0e:	606b      	strge	r3, [r5, #4]
 8001d10:	606a      	strlt	r2, [r5, #4]
        if (sensor_comp & BME280_PRESS)
 8001d12:	9b01      	ldr	r3, [sp, #4]
 8001d14:	07db      	lsls	r3, r3, #31
 8001d16:	f140 80ff 	bpl.w	8001f18 <bme280_compensate_data+0x284>
    var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001d1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001d1c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001d20:	17d3      	asrs	r3, r2, #31
 8001d22:	f5b2 32fa 	subs.w	r2, r2, #128000	; 0x1f400
 8001d26:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001d2a:	fba2 6702 	umull	r6, r7, r2, r2
 8001d2e:	fb02 f103 	mul.w	r1, r2, r3
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001d32:	fb00 fe03 	mul.w	lr, r0, r3
    var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001d36:	eb07 0741 	add.w	r7, r7, r1, lsl #1
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001d3a:	17c1      	asrs	r1, r0, #31
 8001d3c:	fb02 ee01 	mla	lr, r2, r1, lr
 8001d40:	fba0 0102 	umull	r0, r1, r0, r2
 8001d44:	4471      	add	r1, lr
 8001d46:	ea4f 3c01 	mov.w	ip, r1, lsl #12
 8001d4a:	ea4c 5c10 	orr.w	ip, ip, r0, lsr #20
 8001d4e:	ea4f 3b00 	mov.w	fp, r0, lsl #12
 8001d52:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8001d56:	fb00 fe07 	mul.w	lr, r0, r7
 8001d5a:	17c1      	asrs	r1, r0, #31
 8001d5c:	fb06 ee01 	mla	lr, r6, r1, lr
 8001d60:	fba0 0106 	umull	r0, r1, r0, r6
 8001d64:	4471      	add	r1, lr
 8001d66:	2800      	cmp	r0, #0
 8001d68:	f171 0e00 	sbcs.w	lr, r1, #0
 8001d6c:	da02      	bge.n	8001d74 <bme280_compensate_data+0xe0>
 8001d6e:	30ff      	adds	r0, #255	; 0xff
 8001d70:	f141 0100 	adc.w	r1, r1, #0
 8001d74:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8001d78:	ea48 6801 	orr.w	r8, r8, r1, lsl #24
 8001d7c:	eb18 080b 	adds.w	r8, r8, fp
 8001d80:	ea4f 2921 	mov.w	r9, r1, asr #8
 8001d84:	eb49 090c 	adc.w	r9, r9, ip
    var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001d88:	f118 0b00 	adds.w	fp, r8, #0
 8001d8c:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 8001d90:	f549 4c00 	adc.w	ip, r9, #32768	; 0x8000
 8001d94:	fbab 0108 	umull	r0, r1, fp, r8
 8001d98:	fb08 110c 	mla	r1, r8, ip, r1
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	f171 0e00 	sbcs.w	lr, r1, #0
 8001da2:	da03      	bge.n	8001dac <bme280_compensate_data+0x118>
 8001da4:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8001da8:	f141 0101 	adc.w	r1, r1, #1
 8001dac:	ea4f 0861 	mov.w	r8, r1, asr #1
 8001db0:	ea4f 79e1 	mov.w	r9, r1, asr #31
    if (var1 != 0)
 8001db4:	ea58 0109 	orrs.w	r1, r8, r9
 8001db8:	f000 80fa 	beq.w	8001fb0 <bme280_compensate_data+0x31c>
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8001dbc:	f04f 0e00 	mov.w	lr, #0
    var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001dc0:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8001dc4:	4347      	muls	r7, r0
 8001dc6:	fba0 bc06 	umull	fp, ip, r0, r6
 8001dca:	17c1      	asrs	r1, r0, #31
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001dcc:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
    var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001dd0:	fb06 7101 	mla	r1, r6, r1, r7
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001dd4:	4343      	muls	r3, r0
    var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001dd6:	448c      	add	ip, r1
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001dd8:	17c1      	asrs	r1, r0, #31
 8001dda:	fb02 3101 	mla	r1, r2, r1, r3
 8001dde:	fba0 2302 	umull	r2, r3, r0, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	045f      	lsls	r7, r3, #17
        var4 = 1048576 - uncomp_data->pressure;
 8001de6:	f8da 3000 	ldr.w	r3, [sl]
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001dea:	0456      	lsls	r6, r2, #17
    var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001dec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001df0:	ea47 37d2 	orr.w	r7, r7, r2, lsr #15
        var4 = 1048576 - uncomp_data->pressure;
 8001df4:	f5c3 1180 	rsb	r1, r3, #1048576	; 0x100000
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001df8:	eb1b 0b06 	adds.w	fp, fp, r6
 8001dfc:	eb4c 0c07 	adc.w	ip, ip, r7
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8001e00:	07ca      	lsls	r2, r1, #31
    var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001e02:	eb1e 060b 	adds.w	r6, lr, fp
 8001e06:	ea4f 07c0 	mov.w	r7, r0, lsl #3
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8001e0a:	ea4f 0351 	mov.w	r3, r1, lsr #1
    var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001e0e:	eb47 070c 	adc.w	r7, r7, ip
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8001e12:	1b96      	subs	r6, r2, r6
 8001e14:	eb63 0707 	sbc.w	r7, r3, r7
 8001e18:	f640 4335 	movw	r3, #3125	; 0xc35
 8001e1c:	fba6 0103 	umull	r0, r1, r6, r3
 8001e20:	4642      	mov	r2, r8
 8001e22:	fb03 1107 	mla	r1, r3, r7, r1
 8001e26:	464b      	mov	r3, r9
 8001e28:	f7fe f990 	bl	800014c <__aeabi_ldivmod>
        var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	f171 0600 	sbcs.w	r6, r1, #0
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	da04      	bge.n	8001e42 <bme280_compensate_data+0x1ae>
 8001e38:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	1812      	adds	r2, r2, r0
 8001e40:	414b      	adcs	r3, r1
 8001e42:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8001e46:	0b52      	lsrs	r2, r2, #13
 8001e48:	ea42 42c3 	orr.w	r2, r2, r3, lsl #19
 8001e4c:	135b      	asrs	r3, r3, #13
 8001e4e:	fb06 fe03 	mul.w	lr, r6, r3
 8001e52:	17f7      	asrs	r7, r6, #31
 8001e54:	fb02 ee07 	mla	lr, r2, r7, lr
 8001e58:	fba6 6702 	umull	r6, r7, r6, r2
 8001e5c:	4373      	muls	r3, r6
 8001e5e:	4477      	add	r7, lr
 8001e60:	fb02 3307 	mla	r3, r2, r7, r3
 8001e64:	fba6 6702 	umull	r6, r7, r6, r2
 8001e68:	441f      	add	r7, r3
 8001e6a:	2e00      	cmp	r6, #0
 8001e6c:	f177 0300 	sbcs.w	r3, r7, #0
 8001e70:	da04      	bge.n	8001e7c <bme280_compensate_data+0x1e8>
 8001e72:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001e76:	2300      	movs	r3, #0
 8001e78:	18b6      	adds	r6, r6, r2
 8001e7a:	415f      	adcs	r7, r3
 8001e7c:	0e72      	lsrs	r2, r6, #25
 8001e7e:	ea42 12c7 	orr.w	r2, r2, r7, lsl #7
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001e82:	1816      	adds	r6, r2, r0
        var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001e84:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
        var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e88:	ea4f 6367 	mov.w	r3, r7, asr #25
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001e8c:	eb43 0701 	adc.w	r7, r3, r1
        var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001e90:	4351      	muls	r1, r2
 8001e92:	17d3      	asrs	r3, r2, #31
 8001e94:	fb00 1303 	mla	r3, r0, r3, r1
 8001e98:	fba2 0100 	umull	r0, r1, r2, r0
 8001e9c:	4419      	add	r1, r3
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	f171 0300 	sbcs.w	r3, r1, #0
 8001ea4:	da03      	bge.n	8001eae <bme280_compensate_data+0x21a>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <bme280_compensate_data+0x32c>)
 8001eaa:	1880      	adds	r0, r0, r2
 8001eac:	4159      	adcs	r1, r3
 8001eae:	0cc2      	lsrs	r2, r0, #19
 8001eb0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001eb4:	14cb      	asrs	r3, r1, #19
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001eb6:	1992      	adds	r2, r2, r6
 8001eb8:	417b      	adcs	r3, r7
 8001eba:	2a00      	cmp	r2, #0
 8001ebc:	f173 0100 	sbcs.w	r1, r3, #0
 8001ec0:	da02      	bge.n	8001ec8 <bme280_compensate_data+0x234>
 8001ec2:	32ff      	adds	r2, #255	; 0xff
 8001ec4:	f143 0300 	adc.w	r3, r3, #0
 8001ec8:	0a12      	lsrs	r2, r2, #8
 8001eca:	ea42 6003 	orr.w	r0, r2, r3, lsl #24
 8001ece:	2210      	movs	r2, #16
 8001ed0:	1219      	asrs	r1, r3, #8
 8001ed2:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
        pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001ed6:	2664      	movs	r6, #100	; 0x64
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001ed8:	fbc3 0102 	smlal	r0, r1, r3, r2
        pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001edc:	0fcb      	lsrs	r3, r1, #31
 8001ede:	18c0      	adds	r0, r0, r3
 8001ee0:	f141 0100 	adc.w	r1, r1, #0
 8001ee4:	1049      	asrs	r1, r1, #1
 8001ee6:	ea4f 0030 	mov.w	r0, r0, rrx
 8001eea:	fba0 2306 	umull	r2, r3, r0, r6
 8001eee:	fb06 3301 	mla	r3, r6, r1, r3
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	f173 0100 	sbcs.w	r1, r3, #0
 8001ef8:	da02      	bge.n	8001f00 <bme280_compensate_data+0x26c>
 8001efa:	327f      	adds	r2, #127	; 0x7f
 8001efc:	f143 0300 	adc.w	r3, r3, #0
 8001f00:	09d2      	lsrs	r2, r2, #7
 8001f02:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 8001f06:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <bme280_compensate_data+0x330>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf28      	it	cs
 8001f0c:	4613      	movcs	r3, r2
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <bme280_compensate_data+0x334>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf38      	it	cc
 8001f14:	4613      	movcc	r3, r2
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001f16:	602b      	str	r3, [r5, #0]
        if (sensor_comp & BME280_HUM)
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	f013 0004 	ands.w	r0, r3, #4
 8001f1e:	d044      	beq.n	8001faa <bme280_compensate_data+0x316>
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001f20:	f44f 6600 	mov.w	r6, #2048	; 0x800
    var1 = calib_data->t_fine - ((int32_t)76800);
 8001f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001f26:	7f20      	ldrb	r0, [r4, #28]
    var1 = calib_data->t_fine - ((int32_t)76800);
 8001f28:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001f2c:	4358      	muls	r0, r3
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8001f2e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8001f32:	f8da 1008 	ldr.w	r1, [sl, #8]
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8001f36:	0512      	lsls	r2, r2, #20
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001f38:	ebc2 3181 	rsb	r1, r2, r1, lsl #14
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001f3c:	fb90 f0f6 	sdiv	r0, r0, r6
    var4 = ((int32_t)calib_data->dig_H5) * var1;
 8001f40:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001f44:	f994 6022 	ldrsb.w	r6, [r4, #34]	; 0x22
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001f48:	fb03 1212 	mls	r2, r3, r2, r1
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001f4c:	4373      	muls	r3, r6
 8001f4e:	f44f 6680 	mov.w	r6, #1024	; 0x400
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001f56:	fb93 f3f6 	sdiv	r3, r3, r6
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001f5a:	4408      	add	r0, r1
 8001f5c:	4343      	muls	r3, r0
 8001f5e:	fb93 f3f6 	sdiv	r3, r3, r6
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001f62:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001f66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001f6a:	4343      	muls	r3, r0
 8001f6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001f70:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001f74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001f78:	fb92 f2f1 	sdiv	r2, r2, r1
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001f7c:	fb93 f3f0 	sdiv	r3, r3, r0
    var3 = var5 * var2;
 8001f80:	4353      	muls	r3, r2
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001f82:	fb93 f2f1 	sdiv	r2, r3, r1
 8001f86:	4352      	muls	r2, r2
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8001f88:	7e21      	ldrb	r1, [r4, #24]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001f8a:	11d2      	asrs	r2, r2, #7
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8001f8c:	434a      	muls	r2, r1
 8001f8e:	2110      	movs	r1, #16
 8001f90:	fb92 f2f1 	sdiv	r2, r2, r1
 8001f94:	1a9b      	subs	r3, r3, r2
    var5 = (var5 < 0 ? 0 : var5);
 8001f96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8001f9a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001f9e:	bfa8      	it	ge
 8001fa0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001fa4:	2000      	movs	r0, #0
    humidity = (uint32_t)(var5 / 4096);
 8001fa6:	131b      	asrs	r3, r3, #12
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001fa8:	60ab      	str	r3, [r5, #8]
}
 8001faa:	b003      	add	sp, #12
 8001fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pressure = pressure_min;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <bme280_compensate_data+0x334>)
 8001fb2:	e7b0      	b.n	8001f16 <bme280_compensate_data+0x282>
        rslt = BME280_E_NULL_PTR;
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb8:	e7f7      	b.n	8001faa <bme280_compensate_data+0x316>
 8001fba:	bf00      	nop
 8001fbc:	fffff060 	.word	0xfffff060
 8001fc0:	0007ffff 	.word	0x0007ffff
 8001fc4:	00a7d8c0 	.word	0x00a7d8c0
 8001fc8:	002dc6c0 	.word	0x002dc6c0

08001fcc <bme280_get_sensor_data>:
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8001fcc:	2300      	movs	r3, #0
{
 8001fce:	b570      	push	{r4, r5, r6, lr}
 8001fd0:	4606      	mov	r6, r0
 8001fd2:	b086      	sub	sp, #24
    rslt = null_ptr_check(dev);
 8001fd4:	4610      	mov	r0, r2
{
 8001fd6:	460d      	mov	r5, r1
 8001fd8:	4614      	mov	r4, r2
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	9302      	str	r3, [sp, #8]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8001fde:	9303      	str	r3, [sp, #12]
 8001fe0:	9304      	str	r3, [sp, #16]
 8001fe2:	9305      	str	r3, [sp, #20]
    rslt = null_ptr_check(dev);
 8001fe4:	f7ff fba9 	bl	800173a <null_ptr_check>
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8001fe8:	b9a0      	cbnz	r0, 8002014 <bme280_get_sensor_data+0x48>
 8001fea:	b199      	cbz	r1, 8002014 <bme280_get_sensor_data+0x48>
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001fec:	4613      	mov	r3, r2
 8001fee:	a901      	add	r1, sp, #4
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	20f7      	movs	r0, #247	; 0xf7
 8001ff4:	f7ff fbaf 	bl	8001756 <bme280_get_regs>
        if (rslt == BME280_OK)
 8001ff8:	b950      	cbnz	r0, 8002010 <bme280_get_sensor_data+0x44>
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001ffa:	a903      	add	r1, sp, #12
 8001ffc:	a801      	add	r0, sp, #4
 8001ffe:	f7ff fe31 	bl	8001c64 <bme280_parse_sensor_data>
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8002002:	f104 0310 	add.w	r3, r4, #16
 8002006:	462a      	mov	r2, r5
 8002008:	a903      	add	r1, sp, #12
 800200a:	4630      	mov	r0, r6
 800200c:	f7ff fe42 	bl	8001c94 <bme280_compensate_data>
}
 8002010:	b006      	add	sp, #24
 8002012:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME280_E_NULL_PTR;
 8002014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002018:	e7fa      	b.n	8002010 <bme280_get_sensor_data+0x44>

0800201a <user_delay_ms>:
	return rslt;
}

void user_delay_ms(uint32_t period)
{
	HAL_Delay(period);
 800201a:	f7fe ba9f 	b.w	800055c <HAL_Delay>
	...

08002020 <user_spi_read>:
     * for a period amount of milliseconds
     */
}

int8_t user_spi_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002024:	4688      	mov	r8, r1
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */

    uint32_t Timeout = 50;

    uint8_t temp_buffer_size = len+1;
 8002026:	1c5c      	adds	r4, r3, #1
 8002028:	b2e4      	uxtb	r4, r4
{
 800202a:	461e      	mov	r6, r3
    uint8_t temp_buffer_tx[temp_buffer_size];
 800202c:	1de3      	adds	r3, r4, #7
 800202e:	f023 0307 	bic.w	r3, r3, #7
{
 8002032:	b082      	sub	sp, #8
 8002034:	af02      	add	r7, sp, #8
    uint8_t temp_buffer_tx[temp_buffer_size];
 8002036:	ebad 0d03 	sub.w	sp, sp, r3
 800203a:	ad02      	add	r5, sp, #8
{
 800203c:	4691      	mov	r9, r2
    uint8_t temp_buffer_rx[temp_buffer_size];
 800203e:	ebad 0d03 	sub.w	sp, sp, r3

    /* setting values for tx buffer */
    memset(temp_buffer_tx, 0, sizeof(temp_buffer_tx));
 8002042:	4622      	mov	r2, r4
 8002044:	2100      	movs	r1, #0
 8002046:	4628      	mov	r0, r5
 8002048:	f000 fad7 	bl	80025fa <memset>
    temp_buffer_tx[0] = reg_addr;
 800204c:	f885 8000 	strb.w	r8, [r5]

    HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_RESET);
 8002050:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8002098 <user_spi_read+0x78>
 8002054:	2200      	movs	r2, #0
 8002056:	4640      	mov	r0, r8
 8002058:	2110      	movs	r1, #16
 800205a:	f7fe fecd 	bl	8000df8 <HAL_GPIO_WritePin>
    rslt = HAL_SPI_TransmitReceive(&hspi1, temp_buffer_tx, temp_buffer_rx, temp_buffer_size, Timeout);
 800205e:	2332      	movs	r3, #50	; 0x32
    uint8_t temp_buffer_rx[temp_buffer_size];
 8002060:	f10d 0a08 	add.w	sl, sp, #8
    rslt = HAL_SPI_TransmitReceive(&hspi1, temp_buffer_tx, temp_buffer_rx, temp_buffer_size, Timeout);
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4652      	mov	r2, sl
 8002068:	4623      	mov	r3, r4
 800206a:	4629      	mov	r1, r5
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <user_spi_read+0x74>)
 800206e:	f7ff fa74 	bl	800155a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
    rslt = HAL_SPI_TransmitReceive(&hspi1, temp_buffer_tx, temp_buffer_rx, temp_buffer_size, Timeout);
 8002074:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 8002076:	2110      	movs	r1, #16
 8002078:	4640      	mov	r0, r8
 800207a:	f7fe febd 	bl	8000df8 <HAL_GPIO_WritePin>

    /* copy received data into origin buffer */
    memcpy(reg_data, &temp_buffer_rx[1], len);
 800207e:	4632      	mov	r2, r6
 8002080:	f10d 0109 	add.w	r1, sp, #9
 8002084:	4648      	mov	r0, r9
 8002086:	f000 faad 	bl	80025e4 <memcpy>
     * | (don't care)   | (don't care)        | HIGH        |
     * |----------------+---------------------|-------------|
     */

    return rslt;
}
 800208a:	b260      	sxtb	r0, r4
 800208c:	46bd      	mov	sp, r7
 800208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002092:	bf00      	nop
 8002094:	200000d4 	.word	0x200000d4
 8002098:	40010800 	.word	0x40010800

0800209c <user_spi_write>:

int8_t user_spi_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 800209c:	b5b0      	push	{r4, r5, r7, lr}
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */

    uint32_t Timeout = 50;

    uint8_t temp_buffer_size = len+1;
 800209e:	1c5c      	adds	r4, r3, #1
 80020a0:	b2e4      	uxtb	r4, r4
    uint8_t temp_buffer[temp_buffer_size];
 80020a2:	1de0      	adds	r0, r4, #7
 80020a4:	f020 0007 	bic.w	r0, r0, #7
{
 80020a8:	af00      	add	r7, sp, #0
    uint8_t temp_buffer[temp_buffer_size];
 80020aa:	ebad 0d00 	sub.w	sp, sp, r0
{
 80020ae:	4615      	mov	r5, r2

    /* setting values for tx buffer */
    temp_buffer[0] = reg_addr;
 80020b0:	4668      	mov	r0, sp
 80020b2:	f800 1b01 	strb.w	r1, [r0], #1
    memcpy(&temp_buffer[1], reg_data, len);
 80020b6:	4629      	mov	r1, r5

    HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_RESET);
 80020b8:	4d0b      	ldr	r5, [pc, #44]	; (80020e8 <user_spi_write+0x4c>)
    memcpy(&temp_buffer[1], reg_data, len);
 80020ba:	461a      	mov	r2, r3
 80020bc:	f000 fa92 	bl	80025e4 <memcpy>
    HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_RESET);
 80020c0:	4628      	mov	r0, r5
 80020c2:	2200      	movs	r2, #0
 80020c4:	2110      	movs	r1, #16
 80020c6:	f7fe fe97 	bl	8000df8 <HAL_GPIO_WritePin>
    rslt = HAL_SPI_Transmit(&hspi1, temp_buffer, temp_buffer_size, Timeout);
 80020ca:	2332      	movs	r3, #50	; 0x32
 80020cc:	4622      	mov	r2, r4
 80020ce:	4669      	mov	r1, sp
 80020d0:	4806      	ldr	r0, [pc, #24]	; (80020ec <user_spi_write+0x50>)
 80020d2:	f7ff f999 	bl	8001408 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 80020d6:	2201      	movs	r2, #1
    rslt = HAL_SPI_Transmit(&hspi1, temp_buffer, temp_buffer_size, Timeout);
 80020d8:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 80020da:	2110      	movs	r1, #16
 80020dc:	4628      	mov	r0, r5
 80020de:	f7fe fe8b 	bl	8000df8 <HAL_GPIO_WritePin>
     * | (don't care)        | (don't care) | HIGH        |
     * |---------------------+--------------|-------------|
     */

    return rslt;
}
 80020e2:	b260      	sxtb	r0, r4
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bdb0      	pop	{r4, r5, r7, pc}
 80020e8:	40010800 	.word	0x40010800
 80020ec:	200000d4 	.word	0x200000d4

080020f0 <setup_bme280>:
	dev.dev_id = 0;
 80020f0:	2300      	movs	r3, #0
int8_t setup_bme280(void) {
 80020f2:	b510      	push	{r4, lr}
	dev.dev_id = 0;
 80020f4:	4c11      	ldr	r4, [pc, #68]	; (800213c <setup_bme280+0x4c>)
 80020f6:	7063      	strb	r3, [r4, #1]
	dev.intf = BME280_SPI_INTF;
 80020f8:	70a3      	strb	r3, [r4, #2]
	dev.read = user_spi_read;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <setup_bme280+0x50>)
	rslt = bme280_init(&dev);
 80020fc:	4620      	mov	r0, r4
	dev.read = user_spi_read;
 80020fe:	6063      	str	r3, [r4, #4]
	dev.write = user_spi_write;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <setup_bme280+0x54>)
 8002102:	60a3      	str	r3, [r4, #8]
	dev.delay_ms = user_delay_ms;
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <setup_bme280+0x58>)
 8002106:	60e3      	str	r3, [r4, #12]
	rslt = bme280_init(&dev);
 8002108:	f7ff fc4e 	bl	80019a8 <bme280_init>
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800210c:	2205      	movs	r2, #5
 800210e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002112:	2202      	movs	r2, #2
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002114:	2301      	movs	r3, #1
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002116:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 800211a:	2204      	movs	r2, #4
	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 800211c:	4621      	mov	r1, r4
 800211e:	201f      	movs	r0, #31
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002120:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002124:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8002128:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 800212c:	f7ff fd2d 	bl	8001b8a <bme280_set_sensor_settings>
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002130:	4621      	mov	r1, r4
}
 8002132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002136:	2003      	movs	r0, #3
 8002138:	f7ff bd62 	b.w	8001c00 <bme280_set_sensor_mode>
 800213c:	20000054 	.word	0x20000054
 8002140:	08002021 	.word	0x08002021
 8002144:	0800209d 	.word	0x0800209d
 8002148:	0800201b 	.word	0x0800201b

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b510      	push	{r4, lr}
 800214e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002150:	2228      	movs	r2, #40	; 0x28
 8002152:	2100      	movs	r1, #0
 8002154:	a806      	add	r0, sp, #24
 8002156:	f000 fa50 	bl	80025fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215a:	2100      	movs	r1, #0
 800215c:	2214      	movs	r2, #20
 800215e:	a801      	add	r0, sp, #4
 8002160:	f000 fa4b 	bl	80025fa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002168:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800216e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002170:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002174:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002176:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002178:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800217a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217e:	f7fe fe47 	bl	8000e10 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002182:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002184:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002188:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800218a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800218c:	4621      	mov	r1, r4
 800218e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002190:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002192:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002194:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002196:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002198:	f7ff f814 	bl	80011c4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800219c:	b010      	add	sp, #64	; 0x40
 800219e:	bd10      	pop	{r4, pc}

080021a0 <main>:
{
 80021a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	2710      	movs	r7, #16
{
 80021a6:	b088      	sub	sp, #32
  HAL_Init();
 80021a8:	f7fe f9b4 	bl	8000514 <HAL_Init>
  SystemClock_Config();
 80021ac:	f7ff ffce 	bl	800214c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	463a      	mov	r2, r7
 80021b2:	2100      	movs	r1, #0
 80021b4:	eb0d 0007 	add.w	r0, sp, r7
 80021b8:	f000 fa1f 	bl	80025fa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021bc:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <main+0x188>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021c4:	4859      	ldr	r0, [pc, #356]	; (800232c <main+0x18c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	433a      	orrs	r2, r7
 80021c8:	619a      	str	r2, [r3, #24]
 80021ca:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	403a      	ands	r2, r7
 80021d0:	9201      	str	r2, [sp, #4]
 80021d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	619a      	str	r2, [r3, #24]
 80021e0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CS0_BME280_Pin */
  GPIO_InitStruct.Pin = CS0_BME280_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e4:	f002 0220 	and.w	r2, r2, #32
 80021e8:	9202      	str	r2, [sp, #8]
 80021ea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	699a      	ldr	r2, [r3, #24]
  hcan.Instance = CAN1;
 80021ee:	4d50      	ldr	r5, [pc, #320]	; (8002330 <main+0x190>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	f042 0204 	orr.w	r2, r2, #4
 80021f4:	619a      	str	r2, [r3, #24]
 80021f6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002202:	f7fe fdf9 	bl	8000df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	4639      	mov	r1, r7
 800220a:	484a      	ldr	r0, [pc, #296]	; (8002334 <main+0x194>)
 800220c:	f7fe fdf4 	bl	8000df8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8002210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002214:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002216:	2311      	movs	r3, #17
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002218:	eb0d 0107 	add.w	r1, sp, r7
 800221c:	4843      	ldr	r0, [pc, #268]	; (800232c <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800221e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002226:	f7fe fd05 	bl	8000c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS0_BME280_GPIO_Port, &GPIO_InitStruct);
 800222a:	eb0d 0107 	add.w	r1, sp, r7
 800222e:	4841      	ldr	r0, [pc, #260]	; (8002334 <main+0x194>)
  GPIO_InitStruct.Pin = CS0_BME280_Pin;
 8002230:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002232:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(CS0_BME280_GPIO_Port, &GPIO_InitStruct);
 800223a:	f7fe fcfb 	bl	8000c34 <HAL_GPIO_Init>
  hcan.Init.Prescaler = 9;
 800223e:	2309      	movs	r3, #9
 8002240:	4a3d      	ldr	r2, [pc, #244]	; (8002338 <main+0x198>)
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002242:	4628      	mov	r0, r5
  hcan.Init.Prescaler = 9;
 8002244:	e885 000c 	stmia.w	r5, {r2, r3}
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800224c:	60ac      	str	r4, [r5, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800224e:	60ec      	str	r4, [r5, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002250:	612b      	str	r3, [r5, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002252:	616c      	str	r4, [r5, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002254:	762c      	strb	r4, [r5, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002256:	766c      	strb	r4, [r5, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002258:	76ac      	strb	r4, [r5, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800225a:	76ec      	strb	r4, [r5, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800225c:	772c      	strb	r4, [r5, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800225e:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002260:	f7fe f98e 	bl	8000580 <HAL_CAN_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002264:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8002268:	4834      	ldr	r0, [pc, #208]	; (800233c <main+0x19c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800226a:	4935      	ldr	r1, [pc, #212]	; (8002340 <main+0x1a0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800226c:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800226e:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002276:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8002278:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800227a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800227c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800227e:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002280:	61c7      	str	r7, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002282:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002284:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002286:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002288:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800228a:	f7ff f882 	bl	8001392 <HAL_SPI_Init>
  sFilterConfig.SlaveStartFilterBank = 14;
 800228e:	230e      	movs	r3, #14
  sFilterConfig.FilterBank = 0;
 8002290:	492c      	ldr	r1, [pc, #176]	; (8002344 <main+0x1a4>)
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8002292:	4628      	mov	r0, r5
  sFilterConfig.SlaveStartFilterBank = 14;
 8002294:	624b      	str	r3, [r1, #36]	; 0x24
  sFilterConfig.FilterBank = 0;
 8002296:	614c      	str	r4, [r1, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002298:	618c      	str	r4, [r1, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800229a:	61ce      	str	r6, [r1, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800229c:	600c      	str	r4, [r1, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800229e:	604c      	str	r4, [r1, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80022a0:	608c      	str	r4, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80022a2:	60cc      	str	r4, [r1, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022a4:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80022a6:	620e      	str	r6, [r1, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80022a8:	f7fe f9e5 	bl	8000676 <HAL_CAN_ConfigFilter>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80022ac:	4628      	mov	r0, r5
 80022ae:	f7fe fa4e 	bl	800074e <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80022b2:	2103      	movs	r1, #3
 80022b4:	4628      	mov	r0, r5
 80022b6:	f7fe fb39 	bl	800092c <HAL_CAN_ActivateNotification>
  TxHeader.StdId = 0x321;
 80022ba:	f240 3221 	movw	r2, #801	; 0x321
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <main+0x1a8>)
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 80022c0:	4639      	mov	r1, r7
  TxHeader.ExtId = 0x01;
 80022c2:	e883 0044 	stmia.w	r3, {r2, r6}
  TxHeader.DLC = 8;
 80022c6:	2208      	movs	r2, #8
  TxHeader.RTR = CAN_RTR_DATA;
 80022c8:	60dc      	str	r4, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80022ca:	609c      	str	r4, [r3, #8]
  TxHeader.DLC = 8;
 80022cc:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80022ce:	751c      	strb	r4, [r3, #20]
  TxData[2] = 3;
 80022d0:	2303      	movs	r3, #3
  TxData[0] = 1;
 80022d2:	4c1e      	ldr	r4, [pc, #120]	; (800234c <main+0x1ac>)
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 80022d4:	4817      	ldr	r0, [pc, #92]	; (8002334 <main+0x194>)
  TxData[2] = 3;
 80022d6:	70a3      	strb	r3, [r4, #2]
  TxData[3] = 4;
 80022d8:	2304      	movs	r3, #4
 80022da:	70e3      	strb	r3, [r4, #3]
  TxData[4] = 5;
 80022dc:	2305      	movs	r3, #5
 80022de:	7123      	strb	r3, [r4, #4]
  TxData[5] = 6;
 80022e0:	2306      	movs	r3, #6
 80022e2:	7163      	strb	r3, [r4, #5]
  TxData[6] = 7;
 80022e4:	2307      	movs	r3, #7
  TxData[7] = 8;
 80022e6:	71e2      	strb	r2, [r4, #7]
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 80022e8:	4632      	mov	r2, r6
  TxData[0] = 1;
 80022ea:	7026      	strb	r6, [r4, #0]
  TxData[6] = 7;
 80022ec:	71a3      	strb	r3, [r4, #6]
  TxData[1] = 2;
 80022ee:	f884 8001 	strb.w	r8, [r4, #1]
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_SET);
 80022f2:	f7fe fd81 	bl	8000df8 <HAL_GPIO_WritePin>
  setup_bme280();
 80022f6:	f7ff fefb 	bl	80020f0 <setup_bme280>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80022fa:	4f15      	ldr	r7, [pc, #84]	; (8002350 <main+0x1b0>)
 80022fc:	4e15      	ldr	r6, [pc, #84]	; (8002354 <main+0x1b4>)
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80022fe:	4d16      	ldr	r5, [pc, #88]	; (8002358 <main+0x1b8>)
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002300:	463a      	mov	r2, r7
 8002302:	4631      	mov	r1, r6
 8002304:	2007      	movs	r0, #7
 8002306:	f7ff fe61 	bl	8001fcc <bme280_get_sensor_data>
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800230a:	462b      	mov	r3, r5
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <main+0x1ac>)
 800230e:	490e      	ldr	r1, [pc, #56]	; (8002348 <main+0x1a8>)
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <main+0x190>)
 8002312:	f7fe fa47 	bl	80007a4 <HAL_CAN_AddTxMessage>
	  HAL_Delay(2000);
 8002316:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800231a:	f7fe f91f 	bl	800055c <HAL_Delay>
	  TxData[7] = TxData[7] + 1;
 800231e:	79e3      	ldrb	r3, [r4, #7]
 8002320:	3301      	adds	r3, #1
 8002322:	71e3      	strb	r3, [r4, #7]
 8002324:	e7ec      	b.n	8002300 <main+0x160>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	40011000 	.word	0x40011000
 8002330:	200000a0 	.word	0x200000a0
 8002334:	40010800 	.word	0x40010800
 8002338:	40006400 	.word	0x40006400
 800233c:	200000d4 	.word	0x200000d4
 8002340:	40013000 	.word	0x40013000
 8002344:	2000002c 	.word	0x2000002c
 8002348:	20000134 	.word	0x20000134
 800234c:	200000c8 	.word	0x200000c8
 8002350:	20000054 	.word	0x20000054
 8002354:	20000094 	.word	0x20000094
 8002358:	200000d0 	.word	0x200000d0

0800235c <HAL_CAN_TxMailbox0CompleteCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan_)
{
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800235c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002360:	4801      	ldr	r0, [pc, #4]	; (8002368 <HAL_CAN_TxMailbox0CompleteCallback+0xc>)
 8002362:	f7fe bd4e 	b.w	8000e02 <HAL_GPIO_TogglePin>
 8002366:	bf00      	nop
 8002368:	40011000 	.word	0x40011000

0800236c <HAL_CAN_RxFifo0MsgPendingCallback>:
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 800236c:	b508      	push	{r3, lr}
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800236e:	2100      	movs	r1, #0
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8002372:	4a06      	ldr	r2, [pc, #24]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002374:	4806      	ldr	r0, [pc, #24]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002376:	f7fe fa63 	bl	8000840 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
}
 800237a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800237e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002382:	4804      	ldr	r0, [pc, #16]	; (8002394 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002384:	f7fe bd3d 	b.w	8000e02 <HAL_GPIO_TogglePin>
 8002388:	2000012c 	.word	0x2000012c
 800238c:	2000014c 	.word	0x2000014c
 8002390:	200000a0 	.word	0x200000a0
 8002394:	40011000 	.word	0x40011000

08002398 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_MspInit+0x3c>)
{
 800239a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	619a      	str	r2, [r3, #24]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	f002 0201 	and.w	r2, r2, #1
 80023aa:	9200      	str	r2, [sp, #0]
 80023ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023b4:	61da      	str	r2, [r3, #28]
 80023b6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023c2:	6853      	ldr	r3, [r2, #4]
 80023c4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	b002      	add	sp, #8
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000

080023dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023dc:	b510      	push	{r4, lr}
 80023de:	4604      	mov	r4, r0
 80023e0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	2210      	movs	r2, #16
 80023e4:	2100      	movs	r1, #0
 80023e6:	a802      	add	r0, sp, #8
 80023e8:	f000 f907 	bl	80025fa <memset>
  if(hcan->Instance==CAN1)
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_CAN_MspInit+0x88>)
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d135      	bne.n	8002460 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023f4:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80023f8:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023fc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002400:	61da      	str	r2, [r3, #28]
 8002402:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	4818      	ldr	r0, [pc, #96]	; (8002468 <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002406:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800240a:	9200      	str	r2, [sp, #0]
 800240c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	f042 0204 	orr.w	r2, r2, #4
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002424:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f7fe fc05 	bl	8000c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800242a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002434:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	a902      	add	r1, sp, #8
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <HAL_CAN_MspInit+0x8c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f7fe fbfa 	bl	8000c34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2013      	movs	r0, #19
 8002444:	4611      	mov	r1, r2
 8002446:	f7fe fb9d 	bl	8000b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800244a:	2013      	movs	r0, #19
 800244c:	f7fe fbce 	bl	8000bec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2014      	movs	r0, #20
 8002454:	4611      	mov	r1, r2
 8002456:	f7fe fb95 	bl	8000b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800245a:	2014      	movs	r0, #20
 800245c:	f7fe fbc6 	bl	8000bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002460:	b006      	add	sp, #24
 8002462:	bd10      	pop	{r4, pc}
 8002464:	40006400 	.word	0x40006400
 8002468:	40010800 	.word	0x40010800

0800246c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800246c:	b510      	push	{r4, lr}
 800246e:	4604      	mov	r4, r0
 8002470:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	2210      	movs	r2, #16
 8002474:	2100      	movs	r1, #0
 8002476:	a802      	add	r0, sp, #8
 8002478:	f000 f8bf 	bl	80025fa <memset>
  if(hspi->Instance==SPI1)
 800247c:	6822      	ldr	r2, [r4, #0]
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_SPI_MspInit+0x6c>)
 8002480:	429a      	cmp	r2, r3
 8002482:	d126      	bne.n	80024d2 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002484:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002488:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800248c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	4811      	ldr	r0, [pc, #68]	; (80024dc <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002496:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800249a:	9200      	str	r2, [sp, #0]
 800249c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	f042 0204 	orr.w	r2, r2, #4
 80024a4:	619a      	str	r2, [r3, #24]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024b0:	23a0      	movs	r3, #160	; 0xa0
 80024b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024bc:	f7fe fbba 	bl	8000c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024c0:	2340      	movs	r3, #64	; 0x40
 80024c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	a902      	add	r1, sp, #8
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f7fe fbb1 	bl	8000c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024d2:	b006      	add	sp, #24
 80024d4:	bd10      	pop	{r4, pc}
 80024d6:	bf00      	nop
 80024d8:	40013000 	.word	0x40013000
 80024dc:	40010800 	.word	0x40010800

080024e0 <NMI_Handler>:
 80024e0:	4770      	bx	lr

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	e7fe      	b.n	80024e2 <HardFault_Handler>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	e7fe      	b.n	80024e4 <MemManage_Handler>

080024e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e6:	e7fe      	b.n	80024e6 <BusFault_Handler>

080024e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e8:	e7fe      	b.n	80024e8 <UsageFault_Handler>

080024ea <SVC_Handler>:
 80024ea:	4770      	bx	lr

080024ec <DebugMon_Handler>:
 80024ec:	4770      	bx	lr

080024ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ee:	4770      	bx	lr

080024f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f0:	f7fe b822 	b.w	8000538 <HAL_IncTick>

080024f4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024f4:	4801      	ldr	r0, [pc, #4]	; (80024fc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80024f6:	f7fe ba35 	b.w	8000964 <HAL_CAN_IRQHandler>
 80024fa:	bf00      	nop
 80024fc:	200000a0 	.word	0x200000a0

08002500 <USB_HP_CAN1_TX_IRQHandler>:
 8002500:	f7ff bff8 	b.w	80024f4 <USB_LP_CAN1_RX0_IRQHandler>

08002504 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <SystemInit+0x40>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <SystemInit+0x44>)
 8002512:	400a      	ands	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800251c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002520:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002528:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002530:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002532:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002536:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <SystemInit+0x48>)
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	f8ff0000 	.word	0xf8ff0000
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002550:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002552:	e003      	b.n	800255c <LoopCopyDataInit>

08002554 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002556:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002558:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800255a:	3104      	adds	r1, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800255c:	480a      	ldr	r0, [pc, #40]	; (8002588 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002560:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002562:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002564:	d3f6      	bcc.n	8002554 <CopyDataInit>
  ldr r2, =_sbss
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002568:	e002      	b.n	8002570 <LoopFillZerobss>

0800256a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800256c:	f842 3b04 	str.w	r3, [r2], #4

08002570 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002572:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002574:	d3f9      	bcc.n	800256a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002576:	f7ff ffc5 	bl	8002504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257a:	f000 f80f 	bl	800259c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800257e:	f7ff fe0f 	bl	80021a0 <main>
  bx lr
 8002582:	4770      	bx	lr
  ldr r3, =_sidata
 8002584:	08002654 	.word	0x08002654
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800258c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002590:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002594:	20000168 	.word	0x20000168

08002598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC1_2_IRQHandler>
	...

0800259c <__libc_init_array>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2500      	movs	r5, #0
 80025a0:	4e0c      	ldr	r6, [pc, #48]	; (80025d4 <__libc_init_array+0x38>)
 80025a2:	4c0d      	ldr	r4, [pc, #52]	; (80025d8 <__libc_init_array+0x3c>)
 80025a4:	1ba4      	subs	r4, r4, r6
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	42a5      	cmp	r5, r4
 80025aa:	d109      	bne.n	80025c0 <__libc_init_array+0x24>
 80025ac:	f000 f82e 	bl	800260c <_init>
 80025b0:	2500      	movs	r5, #0
 80025b2:	4e0a      	ldr	r6, [pc, #40]	; (80025dc <__libc_init_array+0x40>)
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <__libc_init_array+0x44>)
 80025b6:	1ba4      	subs	r4, r4, r6
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	42a5      	cmp	r5, r4
 80025bc:	d105      	bne.n	80025ca <__libc_init_array+0x2e>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c4:	4798      	blx	r3
 80025c6:	3501      	adds	r5, #1
 80025c8:	e7ee      	b.n	80025a8 <__libc_init_array+0xc>
 80025ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ce:	4798      	blx	r3
 80025d0:	3501      	adds	r5, #1
 80025d2:	e7f2      	b.n	80025ba <__libc_init_array+0x1e>
 80025d4:	0800264c 	.word	0x0800264c
 80025d8:	0800264c 	.word	0x0800264c
 80025dc:	0800264c 	.word	0x0800264c
 80025e0:	08002650 	.word	0x08002650

080025e4 <memcpy>:
 80025e4:	b510      	push	{r4, lr}
 80025e6:	1e43      	subs	r3, r0, #1
 80025e8:	440a      	add	r2, r1
 80025ea:	4291      	cmp	r1, r2
 80025ec:	d100      	bne.n	80025f0 <memcpy+0xc>
 80025ee:	bd10      	pop	{r4, pc}
 80025f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025f8:	e7f7      	b.n	80025ea <memcpy+0x6>

080025fa <memset>:
 80025fa:	4603      	mov	r3, r0
 80025fc:	4402      	add	r2, r0
 80025fe:	4293      	cmp	r3, r2
 8002600:	d100      	bne.n	8002604 <memset+0xa>
 8002602:	4770      	bx	lr
 8002604:	f803 1b01 	strb.w	r1, [r3], #1
 8002608:	e7f9      	b.n	80025fe <memset+0x4>
	...

0800260c <_init>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	bf00      	nop
 8002610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002612:	bc08      	pop	{r3}
 8002614:	469e      	mov	lr, r3
 8002616:	4770      	bx	lr

08002618 <_fini>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	bf00      	nop
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr
