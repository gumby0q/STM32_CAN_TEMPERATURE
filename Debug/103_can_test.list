
103_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001388  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001494  08001494  00011494  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080014bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  2000000c  080014c8  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00001200  2000015c  080014c8  0002015c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008d15  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001866  00000000  00000000  00028d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032de  00000000  00000000  0002a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005d8  00000000  00000000  0002d890  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000770  00000000  00000000  0002de68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002f04  00000000  00000000  0002e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000028eb  00000000  00000000  000314dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033dc7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001028  00000000  00000000  00033e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800147c 	.word	0x0800147c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800147c 	.word	0x0800147c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fb90 	bl	8000888 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 fb44 	bl	8000804 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fb1d 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f838 	bl	8001220 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000200:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000202:	4604      	mov	r4, r0
 8000204:	2800      	cmp	r0, #0
 8000206:	d06e      	beq.n	80002e6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000208:	f890 3020 	ldrb.w	r3, [r0, #32]
 800020c:	b90b      	cbnz	r3, 8000212 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800020e:	f001 f829 	bl	8001264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000212:	6822      	ldr	r2, [r4, #0]
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f023 0302 	bic.w	r3, r3, #2
 800021a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800021c:	f7ff ffd8 	bl	80001d0 <HAL_GetTick>
 8000220:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000222:	6823      	ldr	r3, [r4, #0]
 8000224:	685a      	ldr	r2, [r3, #4]
 8000226:	0791      	lsls	r1, r2, #30
 8000228:	d451      	bmi.n	80002ce <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	f042 0201 	orr.w	r2, r2, #1
 8000230:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000232:	f7ff ffcd 	bl	80001d0 <HAL_GetTick>
 8000236:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000238:	6823      	ldr	r3, [r4, #0]
 800023a:	685a      	ldr	r2, [r3, #4]
 800023c:	07d2      	lsls	r2, r2, #31
 800023e:	d554      	bpl.n	80002ea <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000240:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000242:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000244:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	bf0c      	ite	eq
 800024a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800024e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000252:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000254:	7e62      	ldrb	r2, [r4, #25]
 8000256:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	bf0c      	ite	eq
 800025c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000260:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000264:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000266:	7ea2      	ldrb	r2, [r4, #26]
 8000268:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	bf0c      	ite	eq
 800026e:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000272:	f022 0220 	bicne.w	r2, r2, #32
 8000276:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000278:	7ee2      	ldrb	r2, [r4, #27]
 800027a:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	bf0c      	ite	eq
 8000280:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000284:	f042 0210 	orrne.w	r2, r2, #16
 8000288:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800028a:	7f22      	ldrb	r2, [r4, #28]
 800028c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	bf0c      	ite	eq
 8000292:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000296:	f022 0208 	bicne.w	r2, r2, #8
 800029a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800029c:	7f62      	ldrb	r2, [r4, #29]
 800029e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	bf0c      	ite	eq
 80002a4:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002a8:	f022 0204 	bicne.w	r2, r2, #4
 80002ac:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002ae:	68e1      	ldr	r1, [r4, #12]
 80002b0:	68a2      	ldr	r2, [r4, #8]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	6921      	ldr	r1, [r4, #16]
 80002b6:	430a      	orrs	r2, r1
 80002b8:	6961      	ldr	r1, [r4, #20]
 80002ba:	430a      	orrs	r2, r1
 80002bc:	6861      	ldr	r1, [r4, #4]
 80002be:	3901      	subs	r1, #1
 80002c0:	430a      	orrs	r2, r1
 80002c2:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80002c4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80002c6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80002c8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80002cc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002ce:	f7ff ff7f 	bl	80001d0 <HAL_GetTick>
 80002d2:	1b40      	subs	r0, r0, r5
 80002d4:	280a      	cmp	r0, #10
 80002d6:	d9a4      	bls.n	8000222 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80002da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002de:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80002e0:	2305      	movs	r3, #5
 80002e2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80002e6:	2001      	movs	r0, #1
}
 80002e8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002ea:	f7ff ff71 	bl	80001d0 <HAL_GetTick>
 80002ee:	1b40      	subs	r0, r0, r5
 80002f0:	280a      	cmp	r0, #10
 80002f2:	d9a1      	bls.n	8000238 <HAL_CAN_Init+0x38>
 80002f4:	e7f0      	b.n	80002d8 <HAL_CAN_Init+0xd8>

080002f6 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80002f6:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80002fa:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 80002fc:	3b01      	subs	r3, #1
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d85f      	bhi.n	80003c2 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000302:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000304:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000306:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000308:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800030c:	f042 0201 	orr.w	r2, r2, #1
 8000310:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000314:	f000 021f 	and.w	r2, r0, #31
 8000318:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800031c:	43d4      	mvns	r4, r2
 800031e:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8000322:	4025      	ands	r5, r4
 8000324:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000328:	69cd      	ldr	r5, [r1, #28]
 800032a:	bb85      	cbnz	r5, 800038e <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800032c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000330:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000332:	4025      	ands	r5, r4
 8000334:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000338:	888d      	ldrh	r5, [r1, #4]
 800033a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800033e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000342:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000346:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000348:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800034a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800034e:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000352:	6988      	ldr	r0, [r1, #24]
 8000354:	bb68      	cbnz	r0, 80003b2 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000356:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800035a:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800035c:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000360:	6908      	ldr	r0, [r1, #16]
 8000362:	bb50      	cbnz	r0, 80003ba <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000364:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000368:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800036a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800036e:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000370:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000372:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000374:	bf02      	ittt	eq
 8000376:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 800037a:	430a      	orreq	r2, r1
 800037c:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000380:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000384:	f022 0201 	bic.w	r2, r2, #1
 8000388:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 800038c:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800038e:	2d01      	cmp	r5, #1
 8000390:	d1df      	bne.n	8000352 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000392:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000396:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000398:	4315      	orrs	r5, r2
 800039a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800039e:	888d      	ldrh	r5, [r1, #4]
 80003a0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003a4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003a8:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003ac:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80003ae:	898d      	ldrh	r5, [r1, #12]
 80003b0:	e7cb      	b.n	800034a <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80003b2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80003b6:	4310      	orrs	r0, r2
 80003b8:	e7d0      	b.n	800035c <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80003ba:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80003be:	4310      	orrs	r0, r2
 80003c0:	e7d3      	b.n	800036a <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80003c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80003c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003c8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80003ca:	2001      	movs	r0, #1
  }
}
 80003cc:	bd70      	pop	{r4, r5, r6, pc}

080003ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80003ce:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80003d0:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80003d4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d11f      	bne.n	800041a <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80003da:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003dc:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80003de:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003e2:	6813      	ldr	r3, [r2, #0]
 80003e4:	f023 0301 	bic.w	r3, r3, #1
 80003e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80003ea:	f7ff fef1 	bl	80001d0 <HAL_GetTick>
 80003ee:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80003f0:	6823      	ldr	r3, [r4, #0]
 80003f2:	6858      	ldr	r0, [r3, #4]
 80003f4:	f010 0001 	ands.w	r0, r0, #1
 80003f8:	d101      	bne.n	80003fe <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003fa:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80003fc:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80003fe:	f7ff fee7 	bl	80001d0 <HAL_GetTick>
 8000402:	1b40      	subs	r0, r0, r5
 8000404:	280a      	cmp	r0, #10
 8000406:	d9f3      	bls.n	80003f0 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800040a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000410:	2305      	movs	r3, #5
 8000412:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000416:	2001      	movs	r0, #1
  }
}
 8000418:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800041a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800041c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000420:	6243      	str	r3, [r0, #36]	; 0x24
 8000422:	e7f8      	b.n	8000416 <HAL_CAN_Start+0x48>

08000424 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000426:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800042a:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800042c:	3d01      	subs	r5, #1
 800042e:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000430:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000432:	d841      	bhi.n	80004b8 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000434:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000438:	d03a      	beq.n	80004b0 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800043a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800043e:	2c03      	cmp	r4, #3
 8000440:	f04f 0501 	mov.w	r5, #1
 8000444:	d105      	bne.n	8000452 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000446:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800044c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800044e:	2001      	movs	r0, #1
  }
}
 8000450:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000452:	40a5      	lsls	r5, r4
 8000454:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000456:	6888      	ldr	r0, [r1, #8]
 8000458:	68cf      	ldr	r7, [r1, #12]
 800045a:	f104 0318 	add.w	r3, r4, #24
 800045e:	bb10      	cbnz	r0, 80004a6 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000460:	6808      	ldr	r0, [r1, #0]
 8000462:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000466:	011b      	lsls	r3, r3, #4
 8000468:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800046a:	6908      	ldr	r0, [r1, #16]
 800046c:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 800046e:	7d09      	ldrb	r1, [r1, #20]
 8000470:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000472:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000476:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000478:	bf08      	it	eq
 800047a:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800047e:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000480:	bf04      	itt	eq
 8000482:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000486:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800048a:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 800048c:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800048e:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000498:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800049c:	f042 0201 	orr.w	r2, r2, #1
 80004a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 80004a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80004a6:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80004a8:	4338      	orrs	r0, r7
 80004aa:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 80004ae:	e7da      	b.n	8000466 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b6:	e7c9      	b.n	800044c <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80004b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004be:	e7c5      	b.n	800044c <HAL_CAN_AddTxMessage+0x28>

080004c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80004c2:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80004c6:	3c01      	subs	r4, #1
 80004c8:	2c01      	cmp	r4, #1
 80004ca:	d86b      	bhi.n	80005a4 <HAL_CAN_GetRxMessage+0xe4>
 80004cc:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80004ce:	b941      	cbnz	r1, 80004e2 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80004d0:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80004d2:	07a4      	lsls	r4, r4, #30
 80004d4:	d107      	bne.n	80004e6 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80004dc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80004de:	2001      	movs	r0, #1
  }
}
 80004e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80004e2:	6934      	ldr	r4, [r6, #16]
 80004e4:	e7f5      	b.n	80004d2 <HAL_CAN_GetRxMessage+0x12>
 80004e6:	010c      	lsls	r4, r1, #4
 80004e8:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80004ea:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80004ee:	f007 0704 	and.w	r7, r7, #4
 80004f2:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80004f4:	2f00      	cmp	r7, #0
 80004f6:	d14b      	bne.n	8000590 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80004f8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80004fc:	0d7f      	lsrs	r7, r7, #21
 80004fe:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000500:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000504:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000506:	f007 0702 	and.w	r7, r7, #2
 800050a:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800050c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000510:	f007 070f 	and.w	r7, r7, #15
 8000514:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000516:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800051a:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800051e:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000522:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000524:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000526:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000528:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800052c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800052e:	6802      	ldr	r2, [r0, #0]
 8000530:	4422      	add	r2, r4
 8000532:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000536:	0a12      	lsrs	r2, r2, #8
 8000538:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800053a:	6802      	ldr	r2, [r0, #0]
 800053c:	4422      	add	r2, r4
 800053e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000542:	0c12      	lsrs	r2, r2, #16
 8000544:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000546:	6802      	ldr	r2, [r0, #0]
 8000548:	4422      	add	r2, r4
 800054a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800054e:	0e12      	lsrs	r2, r2, #24
 8000550:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000552:	6802      	ldr	r2, [r0, #0]
 8000554:	4422      	add	r2, r4
 8000556:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800055a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800055c:	6802      	ldr	r2, [r0, #0]
 800055e:	4422      	add	r2, r4
 8000560:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000564:	0a12      	lsrs	r2, r2, #8
 8000566:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	4422      	add	r2, r4
 800056c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000570:	0c12      	lsrs	r2, r2, #16
 8000572:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000574:	6802      	ldr	r2, [r0, #0]
 8000576:	4414      	add	r4, r2
 8000578:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800057c:	0e12      	lsrs	r2, r2, #24
 800057e:	71da      	strb	r2, [r3, #7]
 8000580:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000582:	b951      	cbnz	r1, 800059a <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000584:	68da      	ldr	r2, [r3, #12]
 8000586:	f042 0220 	orr.w	r2, r2, #32
 800058a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800058c:	2000      	movs	r0, #0
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000590:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000594:	08ff      	lsrs	r7, r7, #3
 8000596:	6057      	str	r7, [r2, #4]
 8000598:	e7b2      	b.n	8000500 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800059a:	691a      	ldr	r2, [r3, #16]
 800059c:	f042 0220 	orr.w	r2, r2, #32
 80005a0:	611a      	str	r2, [r3, #16]
 80005a2:	e7f3      	b.n	800058c <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005aa:	e797      	b.n	80004dc <HAL_CAN_GetRxMessage+0x1c>

080005ac <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80005ac:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d805      	bhi.n	80005c2 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80005b6:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 80005b8:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80005ba:	6953      	ldr	r3, [r2, #20]
 80005bc:	4319      	orrs	r1, r3
 80005be:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80005c0:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005ca:	2001      	movs	r0, #1
  }
}
 80005cc:	4770      	bx	lr

080005ce <HAL_CAN_TxMailbox1CompleteCallback>:
 80005ce:	4770      	bx	lr

080005d0 <HAL_CAN_TxMailbox2CompleteCallback>:
 80005d0:	4770      	bx	lr

080005d2 <HAL_CAN_TxMailbox0AbortCallback>:
 80005d2:	4770      	bx	lr

080005d4 <HAL_CAN_TxMailbox1AbortCallback>:
 80005d4:	4770      	bx	lr

080005d6 <HAL_CAN_TxMailbox2AbortCallback>:
 80005d6:	4770      	bx	lr

080005d8 <HAL_CAN_RxFifo0FullCallback>:
 80005d8:	4770      	bx	lr

080005da <HAL_CAN_RxFifo1MsgPendingCallback>:
 80005da:	4770      	bx	lr

080005dc <HAL_CAN_RxFifo1FullCallback>:
 80005dc:	4770      	bx	lr

080005de <HAL_CAN_SleepCallback>:
 80005de:	4770      	bx	lr

080005e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80005e0:	4770      	bx	lr

080005e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80005e2:	4770      	bx	lr

080005e4 <HAL_CAN_IRQHandler>:
{
 80005e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80005e8:	6803      	ldr	r3, [r0, #0]
{
 80005ea:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80005ec:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80005ee:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80005f2:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80005f6:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80005f8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80005fc:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000600:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000604:	d022      	beq.n	800064c <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000606:	f017 0401 	ands.w	r4, r7, #1
 800060a:	d007      	beq.n	800061c <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800060c:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800060e:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000610:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000612:	f140 80a3 	bpl.w	800075c <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000616:	f000 fde5 	bl	80011e4 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800061a:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800061c:	05fb      	lsls	r3, r7, #23
 800061e:	d509      	bpl.n	8000634 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000624:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000626:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000628:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800062a:	f140 80a5 	bpl.w	8000778 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800062e:	4628      	mov	r0, r5
 8000630:	f7ff ffcd 	bl	80005ce <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000634:	03fb      	lsls	r3, r7, #15
 8000636:	d509      	bpl.n	800064c <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000638:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063c:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800063e:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000640:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000642:	f140 80a7 	bpl.w	8000794 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000646:	4628      	mov	r0, r5
 8000648:	f7ff ffc2 	bl	80005d0 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800064c:	0733      	lsls	r3, r6, #28
 800064e:	d507      	bpl.n	8000660 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000650:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000654:	bf1f      	itttt	ne
 8000656:	2210      	movne	r2, #16
 8000658:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800065a:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800065e:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000660:	0777      	lsls	r7, r6, #29
 8000662:	d508      	bpl.n	8000676 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000664:	f01b 0f08 	tst.w	fp, #8
 8000668:	d005      	beq.n	8000676 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800066a:	2208      	movs	r2, #8
 800066c:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800066e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000670:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000672:	f7ff ffb1 	bl	80005d8 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000676:	07b0      	lsls	r0, r6, #30
 8000678:	d506      	bpl.n	8000688 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800067a:	682b      	ldr	r3, [r5, #0]
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	0799      	lsls	r1, r3, #30
 8000680:	d002      	beq.n	8000688 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000682:	4628      	mov	r0, r5
 8000684:	f000 fdb6 	bl	80011f4 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000688:	0672      	lsls	r2, r6, #25
 800068a:	d507      	bpl.n	800069c <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800068c:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000690:	bf1f      	itttt	ne
 8000692:	2210      	movne	r2, #16
 8000694:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000696:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800069a:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800069c:	06b3      	lsls	r3, r6, #26
 800069e:	d508      	bpl.n	80006b2 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80006a0:	f01a 0f08 	tst.w	sl, #8
 80006a4:	d005      	beq.n	80006b2 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80006a6:	2208      	movs	r2, #8
 80006a8:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80006aa:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80006ac:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80006ae:	f7ff ff95 	bl	80005dc <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80006b2:	06f7      	lsls	r7, r6, #27
 80006b4:	d506      	bpl.n	80006c4 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80006b6:	682b      	ldr	r3, [r5, #0]
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	0798      	lsls	r0, r3, #30
 80006bc:	d002      	beq.n	80006c4 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80006be:	4628      	mov	r0, r5
 80006c0:	f7ff ff8b 	bl	80005da <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80006c4:	03b1      	lsls	r1, r6, #14
 80006c6:	d508      	bpl.n	80006da <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80006c8:	f019 0f10 	tst.w	r9, #16
 80006cc:	d005      	beq.n	80006da <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80006ce:	2210      	movs	r2, #16
 80006d0:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 80006d2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80006d4:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80006d6:	f7ff ff82 	bl	80005de <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80006da:	03f2      	lsls	r2, r6, #15
 80006dc:	d508      	bpl.n	80006f0 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80006de:	f019 0f08 	tst.w	r9, #8
 80006e2:	d005      	beq.n	80006f0 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80006e4:	2208      	movs	r2, #8
 80006e6:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80006e8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80006ea:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80006ec:	f7ff ff78 	bl	80005e0 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80006f0:	0433      	lsls	r3, r6, #16
 80006f2:	d52a      	bpl.n	800074a <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80006f4:	f019 0f04 	tst.w	r9, #4
 80006f8:	682a      	ldr	r2, [r5, #0]
 80006fa:	d024      	beq.n	8000746 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80006fc:	05f7      	lsls	r7, r6, #23
 80006fe:	d504      	bpl.n	800070a <HAL_CAN_IRQHandler+0x126>
 8000700:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000704:	bf18      	it	ne
 8000706:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800070a:	05b0      	lsls	r0, r6, #22
 800070c:	d504      	bpl.n	8000718 <HAL_CAN_IRQHandler+0x134>
 800070e:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000712:	bf18      	it	ne
 8000714:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000718:	0571      	lsls	r1, r6, #21
 800071a:	d504      	bpl.n	8000726 <HAL_CAN_IRQHandler+0x142>
 800071c:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000720:	bf18      	it	ne
 8000722:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000726:	0533      	lsls	r3, r6, #20
 8000728:	d50d      	bpl.n	8000746 <HAL_CAN_IRQHandler+0x162>
 800072a:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 800072e:	d00a      	beq.n	8000746 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000730:	2b30      	cmp	r3, #48	; 0x30
 8000732:	d04c      	beq.n	80007ce <HAL_CAN_IRQHandler+0x1ea>
 8000734:	d83c      	bhi.n	80007b0 <HAL_CAN_IRQHandler+0x1cc>
 8000736:	2b10      	cmp	r3, #16
 8000738:	d043      	beq.n	80007c2 <HAL_CAN_IRQHandler+0x1de>
 800073a:	2b20      	cmp	r3, #32
 800073c:	d044      	beq.n	80007c8 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800073e:	6993      	ldr	r3, [r2, #24]
 8000740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000744:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000746:	2304      	movs	r3, #4
 8000748:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800074a:	b12c      	cbz	r4, 8000758 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 800074c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800074e:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000750:	431c      	orrs	r4, r3
 8000752:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000754:	f7ff ff45 	bl	80005e2 <HAL_CAN_ErrorCallback>
 8000758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800075c:	077a      	lsls	r2, r7, #29
 800075e:	d405      	bmi.n	800076c <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000760:	f017 0408 	ands.w	r4, r7, #8
 8000764:	d105      	bne.n	8000772 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000766:	f7ff ff34 	bl	80005d2 <HAL_CAN_TxMailbox0AbortCallback>
 800076a:	e757      	b.n	800061c <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800076c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000770:	e754      	b.n	800061c <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000772:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000776:	e751      	b.n	800061c <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000778:	0579      	lsls	r1, r7, #21
 800077a:	d502      	bpl.n	8000782 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800077c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000780:	e758      	b.n	8000634 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000782:	053a      	lsls	r2, r7, #20
 8000784:	d502      	bpl.n	800078c <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000786:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800078a:	e753      	b.n	8000634 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800078c:	4628      	mov	r0, r5
 800078e:	f7ff ff21 	bl	80005d4 <HAL_CAN_TxMailbox1AbortCallback>
 8000792:	e74f      	b.n	8000634 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000794:	0379      	lsls	r1, r7, #13
 8000796:	d502      	bpl.n	800079e <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000798:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800079c:	e756      	b.n	800064c <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800079e:	033a      	lsls	r2, r7, #12
 80007a0:	d502      	bpl.n	80007a8 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80007a2:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80007a6:	e751      	b.n	800064c <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80007a8:	4628      	mov	r0, r5
 80007aa:	f7ff ff14 	bl	80005d6 <HAL_CAN_TxMailbox2AbortCallback>
 80007ae:	e74d      	b.n	800064c <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80007b0:	2b50      	cmp	r3, #80	; 0x50
 80007b2:	d00f      	beq.n	80007d4 <HAL_CAN_IRQHandler+0x1f0>
 80007b4:	2b60      	cmp	r3, #96	; 0x60
 80007b6:	d010      	beq.n	80007da <HAL_CAN_IRQHandler+0x1f6>
 80007b8:	2b40      	cmp	r3, #64	; 0x40
 80007ba:	d1c0      	bne.n	800073e <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 80007bc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80007c0:	e7bd      	b.n	800073e <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 80007c2:	f044 0408 	orr.w	r4, r4, #8
            break;
 80007c6:	e7ba      	b.n	800073e <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80007c8:	f044 0410 	orr.w	r4, r4, #16
            break;
 80007cc:	e7b7      	b.n	800073e <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80007ce:	f044 0420 	orr.w	r4, r4, #32
            break;
 80007d2:	e7b4      	b.n	800073e <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 80007d4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80007d8:	e7b1      	b.n	800073e <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80007da:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80007de:	e7ae      	b.n	800073e <HAL_CAN_IRQHandler+0x15a>

080007e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007fa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007fc:	60d3      	str	r3, [r2, #12]
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	68dc      	ldr	r4, [r3, #12]
 800080a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	2b04      	cmp	r3, #4
 8000816:	bf28      	it	cs
 8000818:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000820:	bf98      	it	ls
 8000822:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	fa05 f303 	lsl.w	r3, r5, r3
 8000828:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082c:	bf88      	it	hi
 800082e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4019      	ands	r1, r3
 8000832:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	fa05 f404 	lsl.w	r4, r5, r4
 8000838:	3c01      	subs	r4, #1
 800083a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800083c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083e:	ea42 0201 	orr.w	r2, r2, r1
 8000842:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	bfa9      	itett	ge
 8000848:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	4b06      	ldrlt	r3, [pc, #24]	; (8000868 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	b2d2      	uxtbge	r2, r2
 8000850:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	bfbb      	ittet	lt
 8000856:	f000 000f 	andlt.w	r0, r0, #15
 800085a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	541a      	strblt	r2, [r3, r0]
 8000862:	bd30      	pop	{r4, r5, pc}
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	e000ed14 	.word	0xe000ed14

0800086c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800086c:	2800      	cmp	r0, #0
 800086e:	db08      	blt.n	8000882 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000870:	2301      	movs	r3, #1
 8000872:	0942      	lsrs	r2, r0, #5
 8000874:	f000 001f 	and.w	r0, r0, #31
 8000878:	fa03 f000 	lsl.w	r0, r3, r0
 800087c:	4b01      	ldr	r3, [pc, #4]	; (8000884 <HAL_NVIC_EnableIRQ+0x18>)
 800087e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100

08000888 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	3801      	subs	r0, #1
 800088a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088e:	d20a      	bcs.n	80008a6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e010 	.word	0xe000e010
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008b8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80008ba:	4626      	mov	r6, r4
 80008bc:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008be:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000a68 <HAL_GPIO_Init+0x1b4>
 80008c2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000a6c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	680a      	ldr	r2, [r1, #0]
 80008c8:	fa32 f506 	lsrs.w	r5, r2, r6
 80008cc:	d102      	bne.n	80008d4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80008ce:	b003      	add	sp, #12
 80008d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80008d4:	f04f 0801 	mov.w	r8, #1
 80008d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008dc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80008e0:	4590      	cmp	r8, r2
 80008e2:	d17f      	bne.n	80009e4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80008e4:	684d      	ldr	r5, [r1, #4]
 80008e6:	2d12      	cmp	r5, #18
 80008e8:	f000 80aa 	beq.w	8000a40 <HAL_GPIO_Init+0x18c>
 80008ec:	f200 8083 	bhi.w	80009f6 <HAL_GPIO_Init+0x142>
 80008f0:	2d02      	cmp	r5, #2
 80008f2:	f000 80a2 	beq.w	8000a3a <HAL_GPIO_Init+0x186>
 80008f6:	d877      	bhi.n	80009e8 <HAL_GPIO_Init+0x134>
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	f000 8089 	beq.w	8000a10 <HAL_GPIO_Init+0x15c>
 80008fe:	2d01      	cmp	r5, #1
 8000900:	f000 8099 	beq.w	8000a36 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000904:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000908:	2aff      	cmp	r2, #255	; 0xff
 800090a:	bf93      	iteet	ls
 800090c:	4682      	movls	sl, r0
 800090e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000912:	3d08      	subhi	r5, #8
 8000914:	f8d0 b000 	ldrls.w	fp, [r0]
 8000918:	bf92      	itee	ls
 800091a:	00b5      	lslls	r5, r6, #2
 800091c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000920:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000922:	fa09 f805 	lsl.w	r8, r9, r5
 8000926:	ea2b 0808 	bic.w	r8, fp, r8
 800092a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800092e:	bf88      	it	hi
 8000930:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000934:	ea48 0505 	orr.w	r5, r8, r5
 8000938:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000940:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000944:	d04e      	beq.n	80009e4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000946:	4d45      	ldr	r5, [pc, #276]	; (8000a5c <HAL_GPIO_Init+0x1a8>)
 8000948:	4f44      	ldr	r7, [pc, #272]	; (8000a5c <HAL_GPIO_Init+0x1a8>)
 800094a:	69ad      	ldr	r5, [r5, #24]
 800094c:	f026 0803 	bic.w	r8, r6, #3
 8000950:	f045 0501 	orr.w	r5, r5, #1
 8000954:	61bd      	str	r5, [r7, #24]
 8000956:	69bd      	ldr	r5, [r7, #24]
 8000958:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800095c:	f005 0501 	and.w	r5, r5, #1
 8000960:	9501      	str	r5, [sp, #4]
 8000962:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000966:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800096a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800096c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000970:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000974:	fa09 f90b 	lsl.w	r9, r9, fp
 8000978:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800097c:	4d38      	ldr	r5, [pc, #224]	; (8000a60 <HAL_GPIO_Init+0x1ac>)
 800097e:	42a8      	cmp	r0, r5
 8000980:	d063      	beq.n	8000a4a <HAL_GPIO_Init+0x196>
 8000982:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000986:	42a8      	cmp	r0, r5
 8000988:	d061      	beq.n	8000a4e <HAL_GPIO_Init+0x19a>
 800098a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800098e:	42a8      	cmp	r0, r5
 8000990:	d05f      	beq.n	8000a52 <HAL_GPIO_Init+0x19e>
 8000992:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000996:	42a8      	cmp	r0, r5
 8000998:	bf0c      	ite	eq
 800099a:	2503      	moveq	r5, #3
 800099c:	2504      	movne	r5, #4
 800099e:	fa05 f50b 	lsl.w	r5, r5, fp
 80009a2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80009a6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80009aa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80009b0:	bf14      	ite	ne
 80009b2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009b4:	4395      	biceq	r5, r2
 80009b6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80009b8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80009be:	bf14      	ite	ne
 80009c0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009c2:	4395      	biceq	r5, r2
 80009c4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80009c6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80009cc:	bf14      	ite	ne
 80009ce:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009d0:	4395      	biceq	r5, r2
 80009d2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80009d4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80009da:	bf14      	ite	ne
 80009dc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009de:	ea25 0202 	biceq.w	r2, r5, r2
 80009e2:	60da      	str	r2, [r3, #12]
	position++;
 80009e4:	3601      	adds	r6, #1
 80009e6:	e76e      	b.n	80008c6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80009e8:	2d03      	cmp	r5, #3
 80009ea:	d022      	beq.n	8000a32 <HAL_GPIO_Init+0x17e>
 80009ec:	2d11      	cmp	r5, #17
 80009ee:	d189      	bne.n	8000904 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f0:	68cc      	ldr	r4, [r1, #12]
 80009f2:	3404      	adds	r4, #4
          break;
 80009f4:	e786      	b.n	8000904 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80009f6:	4f1b      	ldr	r7, [pc, #108]	; (8000a64 <HAL_GPIO_Init+0x1b0>)
 80009f8:	42bd      	cmp	r5, r7
 80009fa:	d009      	beq.n	8000a10 <HAL_GPIO_Init+0x15c>
 80009fc:	d812      	bhi.n	8000a24 <HAL_GPIO_Init+0x170>
 80009fe:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000a70 <HAL_GPIO_Init+0x1bc>
 8000a02:	454d      	cmp	r5, r9
 8000a04:	d004      	beq.n	8000a10 <HAL_GPIO_Init+0x15c>
 8000a06:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a0a:	454d      	cmp	r5, r9
 8000a0c:	f47f af7a 	bne.w	8000904 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a10:	688c      	ldr	r4, [r1, #8]
 8000a12:	b1c4      	cbz	r4, 8000a46 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a14:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000a16:	bf0c      	ite	eq
 8000a18:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a1c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a20:	2408      	movs	r4, #8
 8000a22:	e76f      	b.n	8000904 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a24:	4575      	cmp	r5, lr
 8000a26:	d0f3      	beq.n	8000a10 <HAL_GPIO_Init+0x15c>
 8000a28:	4565      	cmp	r5, ip
 8000a2a:	d0f1      	beq.n	8000a10 <HAL_GPIO_Init+0x15c>
 8000a2c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000a74 <HAL_GPIO_Init+0x1c0>
 8000a30:	e7eb      	b.n	8000a0a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a32:	2400      	movs	r4, #0
 8000a34:	e766      	b.n	8000904 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a36:	68cc      	ldr	r4, [r1, #12]
          break;
 8000a38:	e764      	b.n	8000904 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3a:	68cc      	ldr	r4, [r1, #12]
 8000a3c:	3408      	adds	r4, #8
          break;
 8000a3e:	e761      	b.n	8000904 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a40:	68cc      	ldr	r4, [r1, #12]
 8000a42:	340c      	adds	r4, #12
          break;
 8000a44:	e75e      	b.n	8000904 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a46:	2404      	movs	r4, #4
 8000a48:	e75c      	b.n	8000904 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	e7a7      	b.n	800099e <HAL_GPIO_Init+0xea>
 8000a4e:	2501      	movs	r5, #1
 8000a50:	e7a5      	b.n	800099e <HAL_GPIO_Init+0xea>
 8000a52:	2502      	movs	r5, #2
 8000a54:	e7a3      	b.n	800099e <HAL_GPIO_Init+0xea>
 8000a56:	bf00      	nop
 8000a58:	40010400 	.word	0x40010400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010800 	.word	0x40010800
 8000a64:	10210000 	.word	0x10210000
 8000a68:	10310000 	.word	0x10310000
 8000a6c:	10320000 	.word	0x10320000
 8000a70:	10110000 	.word	0x10110000
 8000a74:	10220000 	.word	0x10220000

08000a78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a78:	b10a      	cbz	r2, 8000a7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a7a:	6101      	str	r1, [r0, #16]
 8000a7c:	4770      	bx	lr
 8000a7e:	0409      	lsls	r1, r1, #16
 8000a80:	e7fb      	b.n	8000a7a <HAL_GPIO_WritePin+0x2>

08000a82 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000a82:	68c3      	ldr	r3, [r0, #12]
 8000a84:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a86:	bf14      	ite	ne
 8000a88:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a8a:	6101      	streq	r1, [r0, #16]
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a94:	4605      	mov	r5, r0
 8000a96:	b908      	cbnz	r0, 8000a9c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000a98:	2001      	movs	r0, #1
 8000a9a:	e03c      	b.n	8000b16 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a9c:	6803      	ldr	r3, [r0, #0]
 8000a9e:	07db      	lsls	r3, r3, #31
 8000aa0:	d410      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	079f      	lsls	r7, r3, #30
 8000aa6:	d45d      	bmi.n	8000b64 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	0719      	lsls	r1, r3, #28
 8000aac:	f100 8094 	bmi.w	8000bd8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	075a      	lsls	r2, r3, #29
 8000ab4:	f100 80be 	bmi.w	8000c34 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ab8:	69e8      	ldr	r0, [r5, #28]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	f040 812c 	bne.w	8000d18 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e028      	b.n	8000b16 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac4:	4c8f      	ldr	r4, [pc, #572]	; (8000d04 <HAL_RCC_OscConfig+0x274>)
 8000ac6:	6863      	ldr	r3, [r4, #4]
 8000ac8:	f003 030c 	and.w	r3, r3, #12
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d007      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad0:	6863      	ldr	r3, [r4, #4]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d109      	bne.n	8000aee <HAL_RCC_OscConfig+0x5e>
 8000ada:	6863      	ldr	r3, [r4, #4]
 8000adc:	03de      	lsls	r6, r3, #15
 8000ade:	d506      	bpl.n	8000aee <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	039c      	lsls	r4, r3, #14
 8000ae4:	d5dd      	bpl.n	8000aa2 <HAL_RCC_OscConfig+0x12>
 8000ae6:	686b      	ldr	r3, [r5, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1da      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x12>
 8000aec:	e7d4      	b.n	8000a98 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aee:	686b      	ldr	r3, [r5, #4]
 8000af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af4:	d112      	bne.n	8000b1c <HAL_RCC_OscConfig+0x8c>
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000afe:	f7ff fb67 	bl	80001d0 <HAL_GetTick>
 8000b02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	0398      	lsls	r0, r3, #14
 8000b08:	d4cb      	bmi.n	8000aa2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b0a:	f7ff fb61 	bl	80001d0 <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	2864      	cmp	r0, #100	; 0x64
 8000b12:	d9f7      	bls.n	8000b04 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000b14:	2003      	movs	r0, #3
}
 8000b16:	b002      	add	sp, #8
 8000b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1c:	b99b      	cbnz	r3, 8000b46 <HAL_RCC_OscConfig+0xb6>
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b24:	6023      	str	r3, [r4, #0]
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fb4f 	bl	80001d0 <HAL_GetTick>
 8000b32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	0399      	lsls	r1, r3, #14
 8000b38:	d5b3      	bpl.n	8000aa2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b3a:	f7ff fb49 	bl	80001d0 <HAL_GetTick>
 8000b3e:	1b80      	subs	r0, r0, r6
 8000b40:	2864      	cmp	r0, #100	; 0x64
 8000b42:	d9f7      	bls.n	8000b34 <HAL_RCC_OscConfig+0xa4>
 8000b44:	e7e6      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	d103      	bne.n	8000b56 <HAL_RCC_OscConfig+0xc6>
 8000b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b52:	6023      	str	r3, [r4, #0]
 8000b54:	e7cf      	b.n	8000af6 <HAL_RCC_OscConfig+0x66>
 8000b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5a:	6023      	str	r3, [r4, #0]
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b62:	e7cb      	b.n	8000afc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b64:	4c67      	ldr	r4, [pc, #412]	; (8000d04 <HAL_RCC_OscConfig+0x274>)
 8000b66:	6863      	ldr	r3, [r4, #4]
 8000b68:	f013 0f0c 	tst.w	r3, #12
 8000b6c:	d007      	beq.n	8000b7e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b6e:	6863      	ldr	r3, [r4, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d110      	bne.n	8000b9a <HAL_RCC_OscConfig+0x10a>
 8000b78:	6863      	ldr	r3, [r4, #4]
 8000b7a:	03da      	lsls	r2, r3, #15
 8000b7c:	d40d      	bmi.n	8000b9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	079b      	lsls	r3, r3, #30
 8000b82:	d502      	bpl.n	8000b8a <HAL_RCC_OscConfig+0xfa>
 8000b84:	692b      	ldr	r3, [r5, #16]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d186      	bne.n	8000a98 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	696a      	ldr	r2, [r5, #20]
 8000b8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b92:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b96:	6023      	str	r3, [r4, #0]
 8000b98:	e786      	b.n	8000aa8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b9a:	692a      	ldr	r2, [r5, #16]
 8000b9c:	4b5a      	ldr	r3, [pc, #360]	; (8000d08 <HAL_RCC_OscConfig+0x278>)
 8000b9e:	b16a      	cbz	r2, 8000bbc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fb14 	bl	80001d0 <HAL_GetTick>
 8000ba8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	079f      	lsls	r7, r3, #30
 8000bae:	d4ec      	bmi.n	8000b8a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bb0:	f7ff fb0e 	bl	80001d0 <HAL_GetTick>
 8000bb4:	1b80      	subs	r0, r0, r6
 8000bb6:	2802      	cmp	r0, #2
 8000bb8:	d9f7      	bls.n	8000baa <HAL_RCC_OscConfig+0x11a>
 8000bba:	e7ab      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000bbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fb07 	bl	80001d0 <HAL_GetTick>
 8000bc2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	0798      	lsls	r0, r3, #30
 8000bc8:	f57f af6e 	bpl.w	8000aa8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bcc:	f7ff fb00 	bl	80001d0 <HAL_GetTick>
 8000bd0:	1b80      	subs	r0, r0, r6
 8000bd2:	2802      	cmp	r0, #2
 8000bd4:	d9f6      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x134>
 8000bd6:	e79d      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bd8:	69aa      	ldr	r2, [r5, #24]
 8000bda:	4c4a      	ldr	r4, [pc, #296]	; (8000d04 <HAL_RCC_OscConfig+0x274>)
 8000bdc:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <HAL_RCC_OscConfig+0x27c>)
 8000bde:	b1da      	cbz	r2, 8000c18 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000be4:	f7ff faf4 	bl	80001d0 <HAL_GetTick>
 8000be8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bec:	079b      	lsls	r3, r3, #30
 8000bee:	d50d      	bpl.n	8000c0c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000bf0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bf4:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <HAL_RCC_OscConfig+0x280>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bfc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000bfe:	bf00      	nop
  }
  while (Delay --);
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	9201      	str	r2, [sp, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f9      	bne.n	8000bfe <HAL_RCC_OscConfig+0x16e>
 8000c0a:	e751      	b.n	8000ab0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fae0 	bl	80001d0 <HAL_GetTick>
 8000c10:	1b80      	subs	r0, r0, r6
 8000c12:	2802      	cmp	r0, #2
 8000c14:	d9e9      	bls.n	8000bea <HAL_RCC_OscConfig+0x15a>
 8000c16:	e77d      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000c18:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c1a:	f7ff fad9 	bl	80001d0 <HAL_GetTick>
 8000c1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c22:	079f      	lsls	r7, r3, #30
 8000c24:	f57f af44 	bpl.w	8000ab0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c28:	f7ff fad2 	bl	80001d0 <HAL_GetTick>
 8000c2c:	1b80      	subs	r0, r0, r6
 8000c2e:	2802      	cmp	r0, #2
 8000c30:	d9f6      	bls.n	8000c20 <HAL_RCC_OscConfig+0x190>
 8000c32:	e76f      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c34:	4c33      	ldr	r4, [pc, #204]	; (8000d04 <HAL_RCC_OscConfig+0x274>)
 8000c36:	69e3      	ldr	r3, [r4, #28]
 8000c38:	00d8      	lsls	r0, r3, #3
 8000c3a:	d424      	bmi.n	8000c86 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000c3c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	69e3      	ldr	r3, [r4, #28]
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61e3      	str	r3, [r4, #28]
 8000c46:	69e3      	ldr	r3, [r4, #28]
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c50:	4e30      	ldr	r6, [pc, #192]	; (8000d14 <HAL_RCC_OscConfig+0x284>)
 8000c52:	6833      	ldr	r3, [r6, #0]
 8000c54:	05d9      	lsls	r1, r3, #23
 8000c56:	d518      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c58:	68eb      	ldr	r3, [r5, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d126      	bne.n	8000cac <HAL_RCC_OscConfig+0x21c>
 8000c5e:	6a23      	ldr	r3, [r4, #32]
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c66:	f7ff fab3 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c6a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c6e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c70:	6a23      	ldr	r3, [r4, #32]
 8000c72:	079b      	lsls	r3, r3, #30
 8000c74:	d53f      	bpl.n	8000cf6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000c76:	2f00      	cmp	r7, #0
 8000c78:	f43f af1e 	beq.w	8000ab8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c7c:	69e3      	ldr	r3, [r4, #28]
 8000c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c82:	61e3      	str	r3, [r4, #28]
 8000c84:	e718      	b.n	8000ab8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000c86:	2700      	movs	r7, #0
 8000c88:	e7e2      	b.n	8000c50 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c8a:	6833      	ldr	r3, [r6, #0]
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c90:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c92:	f7ff fa9d 	bl	80001d0 <HAL_GetTick>
 8000c96:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c98:	6833      	ldr	r3, [r6, #0]
 8000c9a:	05da      	lsls	r2, r3, #23
 8000c9c:	d4dc      	bmi.n	8000c58 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c9e:	f7ff fa97 	bl	80001d0 <HAL_GetTick>
 8000ca2:	eba0 0008 	sub.w	r0, r0, r8
 8000ca6:	2864      	cmp	r0, #100	; 0x64
 8000ca8:	d9f6      	bls.n	8000c98 <HAL_RCC_OscConfig+0x208>
 8000caa:	e733      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cac:	b9ab      	cbnz	r3, 8000cda <HAL_RCC_OscConfig+0x24a>
 8000cae:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cb0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	6223      	str	r3, [r4, #32]
 8000cba:	6a23      	ldr	r3, [r4, #32]
 8000cbc:	f023 0304 	bic.w	r3, r3, #4
 8000cc0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cc2:	f7ff fa85 	bl	80001d0 <HAL_GetTick>
 8000cc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc8:	6a23      	ldr	r3, [r4, #32]
 8000cca:	0798      	lsls	r0, r3, #30
 8000ccc:	d5d3      	bpl.n	8000c76 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cce:	f7ff fa7f 	bl	80001d0 <HAL_GetTick>
 8000cd2:	1b80      	subs	r0, r0, r6
 8000cd4:	4540      	cmp	r0, r8
 8000cd6:	d9f7      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x238>
 8000cd8:	e71c      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	6a23      	ldr	r3, [r4, #32]
 8000cde:	d103      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x258>
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6223      	str	r3, [r4, #32]
 8000ce6:	e7ba      	b.n	8000c5e <HAL_RCC_OscConfig+0x1ce>
 8000ce8:	f023 0301 	bic.w	r3, r3, #1
 8000cec:	6223      	str	r3, [r4, #32]
 8000cee:	6a23      	ldr	r3, [r4, #32]
 8000cf0:	f023 0304 	bic.w	r3, r3, #4
 8000cf4:	e7b6      	b.n	8000c64 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cf6:	f7ff fa6b 	bl	80001d0 <HAL_GetTick>
 8000cfa:	eba0 0008 	sub.w	r0, r0, r8
 8000cfe:	42b0      	cmp	r0, r6
 8000d00:	d9b6      	bls.n	8000c70 <HAL_RCC_OscConfig+0x1e0>
 8000d02:	e707      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
 8000d04:	40021000 	.word	0x40021000
 8000d08:	42420000 	.word	0x42420000
 8000d0c:	42420480 	.word	0x42420480
 8000d10:	20000008 	.word	0x20000008
 8000d14:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_RCC_OscConfig+0x334>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	461c      	mov	r4, r3
 8000d1e:	f002 020c 	and.w	r2, r2, #12
 8000d22:	2a08      	cmp	r2, #8
 8000d24:	d03d      	beq.n	8000da2 <HAL_RCC_OscConfig+0x312>
 8000d26:	2300      	movs	r3, #0
 8000d28:	4e27      	ldr	r6, [pc, #156]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d2a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d2c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d2e:	d12b      	bne.n	8000d88 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000d30:	f7ff fa4e 	bl	80001d0 <HAL_GetTick>
 8000d34:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	0199      	lsls	r1, r3, #6
 8000d3a:	d41f      	bmi.n	8000d7c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d3c:	6a2b      	ldr	r3, [r5, #32]
 8000d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d42:	d105      	bne.n	8000d50 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d44:	6862      	ldr	r2, [r4, #4]
 8000d46:	68a9      	ldr	r1, [r5, #8]
 8000d48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d50:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d52:	6862      	ldr	r2, [r4, #4]
 8000d54:	430b      	orrs	r3, r1
 8000d56:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d5e:	2301      	movs	r3, #1
 8000d60:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d62:	f7ff fa35 	bl	80001d0 <HAL_GetTick>
 8000d66:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	019a      	lsls	r2, r3, #6
 8000d6c:	f53f aea8 	bmi.w	8000ac0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d70:	f7ff fa2e 	bl	80001d0 <HAL_GetTick>
 8000d74:	1b40      	subs	r0, r0, r5
 8000d76:	2802      	cmp	r0, #2
 8000d78:	d9f6      	bls.n	8000d68 <HAL_RCC_OscConfig+0x2d8>
 8000d7a:	e6cb      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d7c:	f7ff fa28 	bl	80001d0 <HAL_GetTick>
 8000d80:	1bc0      	subs	r0, r0, r7
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9d7      	bls.n	8000d36 <HAL_RCC_OscConfig+0x2a6>
 8000d86:	e6c5      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000d88:	f7ff fa22 	bl	80001d0 <HAL_GetTick>
 8000d8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	f57f ae95 	bpl.w	8000ac0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d96:	f7ff fa1b 	bl	80001d0 <HAL_GetTick>
 8000d9a:	1b40      	subs	r0, r0, r5
 8000d9c:	2802      	cmp	r0, #2
 8000d9e:	d9f6      	bls.n	8000d8e <HAL_RCC_OscConfig+0x2fe>
 8000da0:	e6b8      	b.n	8000b14 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000da2:	2801      	cmp	r0, #1
 8000da4:	f43f aeb7 	beq.w	8000b16 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000da8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000daa:	6a2b      	ldr	r3, [r5, #32]
 8000dac:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f47f ae71 	bne.w	8000a98 <HAL_RCC_OscConfig+0x8>
 8000db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000db8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000dbc:	1ac0      	subs	r0, r0, r3
 8000dbe:	bf18      	it	ne
 8000dc0:	2001      	movne	r0, #1
 8000dc2:	e6a8      	b.n	8000b16 <HAL_RCC_OscConfig+0x86>
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	42420060 	.word	0x42420060

08000dcc <HAL_RCC_GetSysClockFreq>:
{
 8000dcc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000dd0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dd2:	ac02      	add	r4, sp, #8
 8000dd4:	f103 0510 	add.w	r5, r3, #16
 8000dd8:	4622      	mov	r2, r4
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	6859      	ldr	r1, [r3, #4]
 8000dde:	3308      	adds	r3, #8
 8000de0:	c203      	stmia	r2!, {r0, r1}
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	4614      	mov	r4, r2
 8000de6:	d1f7      	bne.n	8000dd8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000de8:	2301      	movs	r3, #1
 8000dea:	f88d 3004 	strb.w	r3, [sp, #4]
 8000dee:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000df0:	4911      	ldr	r1, [pc, #68]	; (8000e38 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000df2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000df6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000df8:	f003 020c 	and.w	r2, r3, #12
 8000dfc:	2a08      	cmp	r2, #8
 8000dfe:	d117      	bne.n	8000e30 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e00:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000e04:	a806      	add	r0, sp, #24
 8000e06:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e08:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e0a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e0e:	d50c      	bpl.n	8000e2a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e10:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e14:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e18:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e1a:	aa06      	add	r2, sp, #24
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e22:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000e26:	b007      	add	sp, #28
 8000e28:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e2c:	4350      	muls	r0, r2
 8000e2e:	e7fa      	b.n	8000e26 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000e32:	e7f8      	b.n	8000e26 <HAL_RCC_GetSysClockFreq+0x5a>
 8000e34:	08001494 	.word	0x08001494
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	007a1200 	.word	0x007a1200
 8000e40:	003d0900 	.word	0x003d0900

08000e44 <HAL_RCC_ClockConfig>:
{
 8000e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e48:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	b910      	cbnz	r0, 8000e54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
 8000e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e54:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
 8000e56:	6813      	ldr	r3, [r2, #0]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d329      	bcc.n	8000eb4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e60:	6821      	ldr	r1, [r4, #0]
 8000e62:	078e      	lsls	r6, r1, #30
 8000e64:	d431      	bmi.n	8000eca <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e66:	07ca      	lsls	r2, r1, #31
 8000e68:	d444      	bmi.n	8000ef4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e6a:	4a40      	ldr	r2, [pc, #256]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	429d      	cmp	r5, r3
 8000e74:	d367      	bcc.n	8000f46 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e76:	6822      	ldr	r2, [r4, #0]
 8000e78:	4d3d      	ldr	r5, [pc, #244]	; (8000f70 <HAL_RCC_ClockConfig+0x12c>)
 8000e7a:	f012 0f04 	tst.w	r2, #4
 8000e7e:	d16e      	bne.n	8000f5e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e80:	0713      	lsls	r3, r2, #28
 8000e82:	d506      	bpl.n	8000e92 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e84:	686b      	ldr	r3, [r5, #4]
 8000e86:	6922      	ldr	r2, [r4, #16]
 8000e88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e90:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e92:	f7ff ff9b 	bl	8000dcc <HAL_RCC_GetSysClockFreq>
 8000e96:	686b      	ldr	r3, [r5, #4]
 8000e98:	4a36      	ldr	r2, [pc, #216]	; (8000f74 <HAL_RCC_ClockConfig+0x130>)
 8000e9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	40d8      	lsrs	r0, r3
 8000ea2:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <HAL_RCC_ClockConfig+0x134>)
 8000ea4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <HAL_RCC_ClockConfig+0x138>)
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	f7ff f94f 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	f023 0307 	bic.w	r3, r3, #7
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ebe:	6813      	ldr	r3, [r2, #0]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	d1c2      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xa>
 8000ec8:	e7ca      	b.n	8000e60 <HAL_RCC_ClockConfig+0x1c>
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ecc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ed0:	bf1e      	ittt	ne
 8000ed2:	685a      	ldrne	r2, [r3, #4]
 8000ed4:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000ed8:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eda:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000edc:	bf42      	ittt	mi
 8000ede:	685a      	ldrmi	r2, [r3, #4]
 8000ee0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000ee4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	68a0      	ldr	r0, [r4, #8]
 8000eea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000eee:	4302      	orrs	r2, r0
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	e7b8      	b.n	8000e66 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef4:	6862      	ldr	r2, [r4, #4]
 8000ef6:	4e1e      	ldr	r6, [pc, #120]	; (8000f70 <HAL_RCC_ClockConfig+0x12c>)
 8000ef8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000efc:	d11b      	bne.n	8000f36 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f02:	d0a4      	beq.n	8000e4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f04:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f06:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f0a:	f023 0303 	bic.w	r3, r3, #3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f12:	f7ff f95d 	bl	80001d0 <HAL_GetTick>
 8000f16:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f18:	6873      	ldr	r3, [r6, #4]
 8000f1a:	6862      	ldr	r2, [r4, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f24:	d0a1      	beq.n	8000e6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f26:	f7ff f953 	bl	80001d0 <HAL_GetTick>
 8000f2a:	1bc0      	subs	r0, r0, r7
 8000f2c:	4540      	cmp	r0, r8
 8000f2e:	d9f3      	bls.n	8000f18 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
}
 8000f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f36:	2a02      	cmp	r2, #2
 8000f38:	d102      	bne.n	8000f40 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f3e:	e7e0      	b.n	8000f02 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	f013 0f02 	tst.w	r3, #2
 8000f44:	e7dd      	b.n	8000f02 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f023 0307 	bic.w	r3, r3, #7
 8000f4c:	432b      	orrs	r3, r5
 8000f4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	429d      	cmp	r5, r3
 8000f58:	f47f af79 	bne.w	8000e4e <HAL_RCC_ClockConfig+0xa>
 8000f5c:	e78b      	b.n	8000e76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f5e:	686b      	ldr	r3, [r5, #4]
 8000f60:	68e1      	ldr	r1, [r4, #12]
 8000f62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f66:	430b      	orrs	r3, r1
 8000f68:	606b      	str	r3, [r5, #4]
 8000f6a:	e789      	b.n	8000e80 <HAL_RCC_ClockConfig+0x3c>
 8000f6c:	40022000 	.word	0x40022000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	080014a4 	.word	0x080014a4
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000f80:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000f82:	4604      	mov	r4, r0
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d034      	beq.n	8000ff2 <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f8c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f94:	b91b      	cbnz	r3, 8000f9e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f96:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f9a:	f000 f9ab 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000f9e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000fa0:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000fa2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000fa6:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fa8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fae:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fb0:	6863      	ldr	r3, [r4, #4]
 8000fb2:	69a1      	ldr	r1, [r4, #24]
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	68e0      	ldr	r0, [r4, #12]
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	6920      	ldr	r0, [r4, #16]
 8000fbc:	4303      	orrs	r3, r0
 8000fbe:	6960      	ldr	r0, [r4, #20]
 8000fc0:	4303      	orrs	r3, r0
 8000fc2:	69e0      	ldr	r0, [r4, #28]
 8000fc4:	4303      	orrs	r3, r0
 8000fc6:	6a20      	ldr	r0, [r4, #32]
 8000fc8:	4303      	orrs	r3, r0
 8000fca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fcc:	4303      	orrs	r3, r0
 8000fce:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000fd2:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fd4:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000fd6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fda:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000fdc:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fde:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fe0:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fe6:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000fe8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fea:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000fec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000ff0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
}
 8000ff4:	bd10      	pop	{r4, pc}

08000ff6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff6:	b510      	push	{r4, lr}
 8000ff8:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	2228      	movs	r2, #40	; 0x28
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	a806      	add	r0, sp, #24
 8001000:	f000 fa34 	bl	800146c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	2100      	movs	r1, #0
 8001006:	2214      	movs	r2, #20
 8001008:	a801      	add	r0, sp, #4
 800100a:	f000 fa2f 	bl	800146c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001012:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001016:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001018:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800101a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001022:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001024:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001026:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f7ff fd32 	bl	8000a90 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001036:	4621      	mov	r1, r4
 8001038:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103e:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001040:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001042:	f7ff feff 	bl	8000e44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001046:	b010      	add	sp, #64	; 0x40
 8001048:	bd10      	pop	{r4, pc}
	...

0800104c <main>:
{
 800104c:	b580      	push	{r7, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	2710      	movs	r7, #16
{
 8001050:	b088      	sub	sp, #32
  HAL_Init();
 8001052:	f7ff f89f 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001056:	f7ff ffce 	bl	8000ff6 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	463a      	mov	r2, r7
 800105c:	2100      	movs	r1, #0
 800105e:	eb0d 0007 	add.w	r0, sp, r7
 8001062:	f000 fa03 	bl	800146c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <main+0x16c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800106e:	4853      	ldr	r0, [pc, #332]	; (80011bc <main+0x170>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	433a      	orrs	r2, r7
 8001072:	619a      	str	r2, [r3, #24]
 8001074:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001078:	403a      	ands	r2, r7
 800107a:	9201      	str	r2, [sp, #4]
 800107c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001084:	f042 0220 	orr.w	r2, r2, #32
 8001088:	619a      	str	r2, [r3, #24]
 800108a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CS0_BME280_Pin */
  GPIO_InitStruct.Pin = CS0_BME280_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	f002 0220 	and.w	r2, r2, #32
 8001092:	9202      	str	r2, [sp, #8]
 8001094:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	699a      	ldr	r2, [r3, #24]
  hcan.Instance = CAN1;
 8001098:	4d49      	ldr	r5, [pc, #292]	; (80011c0 <main+0x174>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	f042 0204 	orr.w	r2, r2, #4
 800109e:	619a      	str	r2, [r3, #24]
 80010a0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	9303      	str	r3, [sp, #12]
 80010aa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010ac:	f7ff fce4 	bl	8000a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS0_BME280_GPIO_Port, CS0_BME280_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	4639      	mov	r1, r7
 80010b4:	4843      	ldr	r0, [pc, #268]	; (80011c4 <main+0x178>)
 80010b6:	f7ff fcdf 	bl	8000a78 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010c0:	2311      	movs	r3, #17
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010c2:	eb0d 0107 	add.w	r1, sp, r7
 80010c6:	483d      	ldr	r0, [pc, #244]	; (80011bc <main+0x170>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f7ff fbf0 	bl	80008b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS0_BME280_GPIO_Port, &GPIO_InitStruct);
 80010d4:	eb0d 0107 	add.w	r1, sp, r7
 80010d8:	483a      	ldr	r0, [pc, #232]	; (80011c4 <main+0x178>)
  GPIO_InitStruct.Pin = CS0_BME280_Pin;
 80010da:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(CS0_BME280_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f7ff fbe6 	bl	80008b4 <HAL_GPIO_Init>
  hcan.Init.Prescaler = 9;
 80010e8:	2309      	movs	r3, #9
 80010ea:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <main+0x17c>)
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010ec:	4628      	mov	r0, r5
  hcan.Init.Prescaler = 9;
 80010ee:	e885 000c 	stmia.w	r5, {r2, r3}
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80010f2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010f6:	60ac      	str	r4, [r5, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010f8:	60ec      	str	r4, [r5, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80010fa:	612b      	str	r3, [r5, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010fc:	616c      	str	r4, [r5, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010fe:	762c      	strb	r4, [r5, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001100:	766c      	strb	r4, [r5, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001102:	76ac      	strb	r4, [r5, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001104:	76ec      	strb	r4, [r5, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001106:	772c      	strb	r4, [r5, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001108:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800110a:	f7ff f879 	bl	8000200 <HAL_CAN_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800110e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <main+0x180>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001114:	492e      	ldr	r1, [pc, #184]	; (80011d0 <main+0x184>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001118:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001122:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001126:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800112a:	61c7      	str	r7, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112c:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001130:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001132:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001134:	f7ff ff24 	bl	8000f80 <HAL_SPI_Init>
  sFilterConfig.SlaveStartFilterBank = 14;
 8001138:	230e      	movs	r3, #14
  sFilterConfig.FilterBank = 0;
 800113a:	4926      	ldr	r1, [pc, #152]	; (80011d4 <main+0x188>)
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800113c:	4628      	mov	r0, r5
  sFilterConfig.SlaveStartFilterBank = 14;
 800113e:	624b      	str	r3, [r1, #36]	; 0x24
  sFilterConfig.FilterBank = 0;
 8001140:	614c      	str	r4, [r1, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001142:	618c      	str	r4, [r1, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001144:	61ce      	str	r6, [r1, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001146:	600c      	str	r4, [r1, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001148:	604c      	str	r4, [r1, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800114a:	608c      	str	r4, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800114c:	60cc      	str	r4, [r1, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800114e:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001150:	620e      	str	r6, [r1, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001152:	f7ff f8d0 	bl	80002f6 <HAL_CAN_ConfigFilter>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001156:	4628      	mov	r0, r5
 8001158:	f7ff f939 	bl	80003ce <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800115c:	4628      	mov	r0, r5
 800115e:	2103      	movs	r1, #3
 8001160:	f7ff fa24 	bl	80005ac <HAL_CAN_ActivateNotification>
  TxData[2] = 3;
 8001164:	2003      	movs	r0, #3
  TxHeader.StdId = 0x321;
 8001166:	4d1c      	ldr	r5, [pc, #112]	; (80011d8 <main+0x18c>)
 8001168:	f240 3321 	movw	r3, #801	; 0x321
  TxHeader.RTR = CAN_RTR_DATA;
 800116c:	60ec      	str	r4, [r5, #12]
  TxHeader.IDE = CAN_ID_STD;
 800116e:	60ac      	str	r4, [r5, #8]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001170:	752c      	strb	r4, [r5, #20]
  TxData[0] = 1;
 8001172:	4c1a      	ldr	r4, [pc, #104]	; (80011dc <main+0x190>)
  TxHeader.DLC = 8;
 8001174:	2208      	movs	r2, #8
  TxData[2] = 3;
 8001176:	70a0      	strb	r0, [r4, #2]
  TxData[3] = 4;
 8001178:	2004      	movs	r0, #4
 800117a:	70e0      	strb	r0, [r4, #3]
  TxData[4] = 5;
 800117c:	2005      	movs	r0, #5
 800117e:	7120      	strb	r0, [r4, #4]
  TxData[5] = 6;
 8001180:	2006      	movs	r0, #6
 8001182:	7160      	strb	r0, [r4, #5]
  TxData[6] = 7;
 8001184:	2007      	movs	r0, #7
  TxHeader.ExtId = 0x01;
 8001186:	e885 0048 	stmia.w	r5, {r3, r6}
  TxData[0] = 1;
 800118a:	7026      	strb	r6, [r4, #0]
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800118c:	4626      	mov	r6, r4
 800118e:	4f14      	ldr	r7, [pc, #80]	; (80011e0 <main+0x194>)
  TxHeader.DLC = 8;
 8001190:	612a      	str	r2, [r5, #16]
  TxData[1] = 2;
 8001192:	f884 8001 	strb.w	r8, [r4, #1]
  TxData[6] = 7;
 8001196:	71a0      	strb	r0, [r4, #6]
  TxData[7] = 8;
 8001198:	71e2      	strb	r2, [r4, #7]
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800119a:	463b      	mov	r3, r7
 800119c:	4632      	mov	r2, r6
 800119e:	4629      	mov	r1, r5
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <main+0x174>)
 80011a2:	f7ff f93f 	bl	8000424 <HAL_CAN_AddTxMessage>
	  HAL_Delay(2000);
 80011a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011aa:	f7ff f817 	bl	80001dc <HAL_Delay>
	  TxData[7] = TxData[7] + 1;
 80011ae:	79e3      	ldrb	r3, [r4, #7]
 80011b0:	3301      	adds	r3, #1
 80011b2:	71e3      	strb	r3, [r4, #7]
 80011b4:	e7f1      	b.n	800119a <main+0x14e>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40011000 	.word	0x40011000
 80011c0:	20000094 	.word	0x20000094
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40006400 	.word	0x40006400
 80011cc:	200000c8 	.word	0x200000c8
 80011d0:	40013000 	.word	0x40013000
 80011d4:	2000002c 	.word	0x2000002c
 80011d8:	20000128 	.word	0x20000128
 80011dc:	200000bc 	.word	0x200000bc
 80011e0:	200000c4 	.word	0x200000c4

080011e4 <HAL_CAN_TxMailbox0CompleteCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan_)
{
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	4801      	ldr	r0, [pc, #4]	; (80011f0 <HAL_CAN_TxMailbox0CompleteCallback+0xc>)
 80011ea:	f7ff bc4a 	b.w	8000a82 <HAL_GPIO_TogglePin>
 80011ee:	bf00      	nop
 80011f0:	40011000 	.word	0x40011000

080011f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80011f4:	b508      	push	{r3, lr}
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011f6:	2100      	movs	r1, #0
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80011fa:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80011fe:	f7ff f95f 	bl	80004c0 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
}
 8001202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800120c:	f7ff bc39 	b.w	8000a82 <HAL_GPIO_TogglePin>
 8001210:	20000120 	.word	0x20000120
 8001214:	20000140 	.word	0x20000140
 8001218:	20000094 	.word	0x20000094
 800121c:	40011000 	.word	0x40011000

08001220 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_MspInit+0x3c>)
{
 8001222:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	f002 0201 	and.w	r2, r2, #1
 8001232:	9200      	str	r2, [sp, #0]
 8001234:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	69da      	ldr	r2, [r3, #28]
 8001238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800123c:	61da      	str	r2, [r3, #28]
 800123e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124a:	6853      	ldr	r3, [r2, #4]
 800124c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	b002      	add	sp, #8
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
 8001268:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	2210      	movs	r2, #16
 800126c:	2100      	movs	r1, #0
 800126e:	a802      	add	r0, sp, #8
 8001270:	f000 f8fc 	bl	800146c <memset>
  if(hcan->Instance==CAN1)
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_CAN_MspInit+0x88>)
 8001278:	429a      	cmp	r2, r3
 800127a:	d135      	bne.n	80012e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800127c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001280:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001284:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001288:	61da      	str	r2, [r3, #28]
 800128a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	4818      	ldr	r0, [pc, #96]	; (80012f0 <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800128e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	699a      	ldr	r2, [r3, #24]
 8001298:	f042 0204 	orr.w	r2, r2, #4
 800129c:	619a      	str	r2, [r3, #24]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ac:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f7ff fb01 	bl	80008b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	a902      	add	r1, sp, #8
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <HAL_CAN_MspInit+0x8c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f7ff faf6 	bl	80008b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2013      	movs	r0, #19
 80012cc:	4611      	mov	r1, r2
 80012ce:	f7ff fa99 	bl	8000804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80012d2:	2013      	movs	r0, #19
 80012d4:	f7ff faca 	bl	800086c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2014      	movs	r0, #20
 80012dc:	4611      	mov	r1, r2
 80012de:	f7ff fa91 	bl	8000804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80012e2:	2014      	movs	r0, #20
 80012e4:	f7ff fac2 	bl	800086c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012e8:	b006      	add	sp, #24
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	40006400 	.word	0x40006400
 80012f0:	40010800 	.word	0x40010800

080012f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f4:	b510      	push	{r4, lr}
 80012f6:	4604      	mov	r4, r0
 80012f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	2210      	movs	r2, #16
 80012fc:	2100      	movs	r1, #0
 80012fe:	a802      	add	r0, sp, #8
 8001300:	f000 f8b4 	bl	800146c <memset>
  if(hspi->Instance==SPI1)
 8001304:	6822      	ldr	r2, [r4, #0]
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_SPI_MspInit+0x6c>)
 8001308:	429a      	cmp	r2, r3
 800130a:	d126      	bne.n	800135a <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800130c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001310:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001314:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001318:	619a      	str	r2, [r3, #24]
 800131a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001322:	9200      	str	r2, [sp, #0]
 8001324:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	f042 0204 	orr.w	r2, r2, #4
 800132c:	619a      	str	r2, [r3, #24]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f7ff fab6 	bl	80008b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	a902      	add	r1, sp, #8
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001352:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f7ff faad 	bl	80008b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800135a:	b006      	add	sp, #24
 800135c:	bd10      	pop	{r4, pc}
 800135e:	bf00      	nop
 8001360:	40013000 	.word	0x40013000
 8001364:	40010800 	.word	0x40010800

08001368 <NMI_Handler>:
 8001368:	4770      	bx	lr

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	e7fe      	b.n	800136a <HardFault_Handler>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	e7fe      	b.n	800136c <MemManage_Handler>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	e7fe      	b.n	800136e <BusFault_Handler>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler>

08001372 <SVC_Handler>:
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	4770      	bx	lr

08001378 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f7fe bf1e 	b.w	80001b8 <HAL_IncTick>

0800137c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800137c:	4801      	ldr	r0, [pc, #4]	; (8001384 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800137e:	f7ff b931 	b.w	80005e4 <HAL_CAN_IRQHandler>
 8001382:	bf00      	nop
 8001384:	20000094 	.word	0x20000094

08001388 <USB_HP_CAN1_TX_IRQHandler>:
 8001388:	f7ff bff8 	b.w	800137c <USB_LP_CAN1_RX0_IRQHandler>

0800138c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <SystemInit+0x40>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	f042 0201 	orr.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <SystemInit+0x44>)
 800139a:	400a      	ands	r2, r1
 800139c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <SystemInit+0x48>)
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	f8ff0000 	.word	0xf8ff0000
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013da:	e003      	b.n	80013e4 <LoopCopyDataInit>

080013dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013e2:	3104      	adds	r1, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013ec:	d3f6      	bcc.n	80013dc <CopyDataInit>
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013f0:	e002      	b.n	80013f8 <LoopFillZerobss>

080013f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013f4:	f842 3b04 	str.w	r3, [r2], #4

080013f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013fc:	d3f9      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013fe:	f7ff ffc5 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f000 f80f 	bl	8001424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001406:	f7ff fe21 	bl	800104c <main>
  bx lr
 800140a:	4770      	bx	lr
  ldr r3, =_sidata
 800140c:	080014bc 	.word	0x080014bc
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001414:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001418:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800141c:	2000015c 	.word	0x2000015c

08001420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC1_2_IRQHandler>
	...

08001424 <__libc_init_array>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	2500      	movs	r5, #0
 8001428:	4e0c      	ldr	r6, [pc, #48]	; (800145c <__libc_init_array+0x38>)
 800142a:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <__libc_init_array+0x3c>)
 800142c:	1ba4      	subs	r4, r4, r6
 800142e:	10a4      	asrs	r4, r4, #2
 8001430:	42a5      	cmp	r5, r4
 8001432:	d109      	bne.n	8001448 <__libc_init_array+0x24>
 8001434:	f000 f822 	bl	800147c <_init>
 8001438:	2500      	movs	r5, #0
 800143a:	4e0a      	ldr	r6, [pc, #40]	; (8001464 <__libc_init_array+0x40>)
 800143c:	4c0a      	ldr	r4, [pc, #40]	; (8001468 <__libc_init_array+0x44>)
 800143e:	1ba4      	subs	r4, r4, r6
 8001440:	10a4      	asrs	r4, r4, #2
 8001442:	42a5      	cmp	r5, r4
 8001444:	d105      	bne.n	8001452 <__libc_init_array+0x2e>
 8001446:	bd70      	pop	{r4, r5, r6, pc}
 8001448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800144c:	4798      	blx	r3
 800144e:	3501      	adds	r5, #1
 8001450:	e7ee      	b.n	8001430 <__libc_init_array+0xc>
 8001452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001456:	4798      	blx	r3
 8001458:	3501      	adds	r5, #1
 800145a:	e7f2      	b.n	8001442 <__libc_init_array+0x1e>
 800145c:	080014b4 	.word	0x080014b4
 8001460:	080014b4 	.word	0x080014b4
 8001464:	080014b4 	.word	0x080014b4
 8001468:	080014b8 	.word	0x080014b8

0800146c <memset>:
 800146c:	4603      	mov	r3, r0
 800146e:	4402      	add	r2, r0
 8001470:	4293      	cmp	r3, r2
 8001472:	d100      	bne.n	8001476 <memset+0xa>
 8001474:	4770      	bx	lr
 8001476:	f803 1b01 	strb.w	r1, [r3], #1
 800147a:	e7f9      	b.n	8001470 <memset+0x4>

0800147c <_init>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	bf00      	nop
 8001480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001482:	bc08      	pop	{r3}
 8001484:	469e      	mov	lr, r3
 8001486:	4770      	bx	lr

08001488 <_fini>:
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148a:	bf00      	nop
 800148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148e:	bc08      	pop	{r3}
 8001490:	469e      	mov	lr, r3
 8001492:	4770      	bx	lr
